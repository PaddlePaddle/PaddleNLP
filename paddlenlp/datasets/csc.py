# Copyright (c) 2021 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import collections
import json
import os

from paddle.dataset.common import md5file
from paddle.utils.download import get_path_from_url
from paddlenlp.utils.env import DATA_HOME
from . import DatasetBuilder

__all__ = ['CSC']


class CSC(DatasetBuilder):
    """
    CSC dataset is "Chinese Spelling Correction" dataset which contains 2 parts:

        1. Human generated datasets. These datases are originated from sighan 13, 14, and 15 datasets 
           which are simplified by https://arxiv.org/abs/2004.14166 and can be downloaded 
           at https://github.com/ACL2020SpellGCN/SpellGCN/tree/master/data/merged.
        2. Machine generated dataset with ASR and OCR technique. This dataset is generated by
           https://aclanthology.org/D18-1273.pdf and can be downloaded at 
           https://github.com/wdimmy/Automatic-Corpus-Generation/tree/master/corpus/train.sgml.

    It contains over 281K sentence pairs. Each sentence pair is constructed as following format:
     "source, target". Source sentence means the sentence which may has some spelling errors while
    target sentece means the correct sentence without any errors.
    """
    URL = "https://paddlenlp.bj.bcebos.com/datasets/csc.zip"
    MD5 = "5c605c237e9a1d35187890f302a3da70"
    META_INFO = collections.namedtuple('META_INFO', ('file', 'md5'))
    SPLITS = {
        'train': META_INFO(
            os.path.join('csc', 'train.txt'),
            'fa45c653a637d92cb1b111e59aceae4e'),
        'dev': META_INFO(
            os.path.join('csc', 'dev.txt'), 'bc34d119aeb7ca022aa66e2f448ded95'),
    }

    def _get_data(self, mode, **kwargs):
        """Downloads dataset."""
        default_root = os.path.join(DATA_HOME, self.__class__.__name__)
        filename, data_hash = self.SPLITS[mode]
        fullname = os.path.join(default_root, filename)
        if not os.path.exists(fullname) or (data_hash and
                                            not md5file(fullname) == data_hash):
            get_path_from_url(self.URL, default_root, self.MD5)

        return fullname

    def _read(self, filename, *args):
        """Reads data."""
        with open(filename, "r", encoding="utf8") as fr:
            for line in fr:
                soruce, target = line.strip('\n').split('\t')[0:2]
                yield {'soruce': soruce, 'target': target}
