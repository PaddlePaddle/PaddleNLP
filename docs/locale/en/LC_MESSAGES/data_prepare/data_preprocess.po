# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 11:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../data_prepare/data_preprocess.rst:3
msgid "数据处理"
msgstr "Data Processing"

#: ../../data_prepare/data_preprocess.rst:5
msgid ""
"Dataset中通常为原始数据，需要经过一定的数据处理并进行采样组batch，而后通过 :class:`paddle.io.DataLoader`"
" 为训练或预测使用，PaddleNLP中为其中各环节提供了相应的功能支持。"
msgstr ""
"The original data in the dataset are nornally raw data, we need to do data processing and betch sampling, "
"then pass it to class:`paddle.io.DataLoader` for training or prediction use. "
"PaddleNLP has provided support for every single of steps of it. "

#: ../../data_prepare/data_preprocess.rst:8
msgid "基于预训练模型的数据处理"
msgstr "Data processing based on pre-trained models. "

#: ../../data_prepare/data_preprocess.rst:10
msgid ""
"在使用预训练模型做NLP任务时，需要加载对应的Tokenizer，PaddleNLP在 :class:`PreTrainedTokenizer` "
"中内置的 :func:`__call__` 方法可以实现基础的数据处理功能。PaddleNLP内置的所有预训练模型的Tokenizer都继承自 "
":class:`PreTrainedTokenizer` ，下面以BertTokenizer举例说明："
msgstr ""
"We need to download the corresponding Tokenizer when we use the pre-trained models for NLP tasks. "
"the built in :func:`__call__` method in :class:`PreTrainedTokenizer` can be used for the basic data processing"
"The tokenizer in all of the PaddleNLP built in pre-trained models are inherited from :class:`PreTrainedTokenizer` "
"Let's take BertTokenizer as an example:"


#: ../../data_prepare/data_preprocess.rst:28
msgid "关于 :func:`__call__` 方法的其他参数和功能，请移步PreTrainedTokenizer。"
msgstr "Please refer to PreTrainedTokenizer for the other parameters and functions of :func:`__call__` medthod."

#: ../../data_prepare/data_preprocess.rst:30
msgid ""
"paddlenlp内置的 :class:`paddlenlp.datasets.MapDataset` 的 :func:`map` "
"方法支持传入一个函数，对数据集内的数据进行统一转换。下面我们以 :obj:`LCQMC` 的数据处理流程为例："
msgstr ""
"We can transform the data in a dataset by passing the :func:`map` into PaddleNLP built in :class:`paddlenlp.datasets.MapDataset`."
"Let's take :obj:`LCQMC` as a data processing example:"

#: ../../data_prepare/data_preprocess.rst:42
msgid ""
"可以看到， :obj:`LCQMC` 是一个句对匹配任务，即判断两个句子的意思是否相似的2分类任务。我们需要处理的是key为 **query** "
"和 **title** 的文本数据，我们编写基于 :class:`PreTrainedTokenizer` 的数据处理函数并传入数据集的 "
":func:`map` 方法。"
msgstr ""
"As we can see, :obj:`LCQMC` is a sentence pairing task. It's a binary judgement task for judging sentence meaning similarity."
"The text data with the key of **query** and **title** is the one we are going to process."
"We write :class:`PreTrainedTokenizer` based data processing function, and also pass :func:`map` method into it. "

#: ../../data_prepare/data_preprocess.rst:69
msgid "可以看到，数据集中的文本数据已经被处理成了模型可以接受的 *feature* 。"
msgstr "As we can see, the text data form the dataset has already been processed and converted into the model compatible *feature*."

#: ../../data_prepare/data_preprocess.rst:71
msgid ""
":func:`map` 方法有一个重要的参数 :attr:`batched`，当设置为 :obj:`True` 时（默认为 "
":obj:`False` ），数据处理函数 :func:`trans_func` 的输入不再是单条数据，而是数据集的所有数据："
msgstr ""
":attr:`batched` is an important parameter in :func:`map` method. When set to :obj:`True` (default is :obj:`False`), the input of data processing function :func:`trans_func` will be the entire data from the dataset, rather than single data. "

#: ../../data_prepare/data_preprocess.rst:99
msgid ""
"可以看到，在本例中两种实现的结果是相同的。但是在诸如阅读理解，对话等任务中，一条原始数据可能会产生多个 *feature* 的情况（参见 "
"`run_squad.py "
"<https://github.com/PaddlePaddle/PaddleNLP/blob/develop/examples/machine_reading_comprehension/SQuAD/run_squad.py>`__"
" ）通常需要将 :attr:`batched` 参数设置为 :obj:`True` 。"
msgstr ""
"As we can see, the two results are the same in this example."
"However, in the tasks like reading comprehension and conversation, a row data could generate more than one *feature* "
"(please refer to `run_squad.py <https://github.com/PaddlePaddle/PaddleNLP/blob/develop/examples/machine_reading_comprehension/SQuAD/run_squad.py>`__)"
"Usually need to set :attr:`batched` parameter to :obj:`True`."

#: ../../data_prepare/data_preprocess.rst:101
msgid ""
"关于 :func:`map` 方法的其他参数和 :class:`paddlenlp.datasets.MapDataset` "
"的其他数据处理方法，请移步MapDataset。"
msgstr "To find out other parameters of :func:`map` method and data processing method of :class:`paddlenlp.datasets.MapDataset`, please read MapDataset"

#: ../../data_prepare/data_preprocess.rst:104
msgid "Batchify"
msgstr "Batchify"

#: ../../data_prepare/data_preprocess.rst:106
msgid ""
"PaddleNLP内置了多种collate function，配合 :class:`paddle.io.BatchSampler` "
"可以协助用户简单的完成组batch的操作。"
msgstr "PaddleNLP has many built in collate function, together with :class:`paddle.io.BatchSampler`, users can simply complete betch matching jobs."

#: ../../data_prepare/data_preprocess.rst:108
msgid ""
"我们继续以 :obj:`LCQMC` 的数据处理流程为例。从上一节最后可以看到，处理后的单条数据是一个 **字典** ，包含 "
"`input_ids` ， `token_type_ids` 和 `label` 三个key。"
msgstr ""
"Let's use :obj:`LCQMC` as the example again. In the end of the previous part,"
" the single data after processing is a **dictinoary**, which includes three keys: `input_ids` ， `token_type_ids`, and `label`."

#: ../../data_prepare/data_preprocess.rst:110
msgid ""
"其中 `input_ids` 和 `token_type_ids` 是需要进行 **padding** 操作后输入模型的，而 `label` "
"是需要 **stack** 之后传入loss function的。"
msgstr ""
"`input_ids` and `token_type_ids` will need to be passed into the model after **padding**,"
"and `label` will need to be passed into loss function after **stack**."

#: ../../data_prepare/data_preprocess.rst:112
msgid ""
"因此，我们使用PaddleNLP内置的 :func:`Dict` ，:func:`Stack` 和 :func:`Pad` "
"函数整理batch中的数据。最终的 :func:`batchify_fn` 如下："
msgstr ""
"Therefore, we organise the data in betch by using PaddleNLP built in functions: :func:`Dict` ，:func:`Stack` and :func:`Pad`. Below is the final :func:`batchify_fn`. "

#: ../../data_prepare/data_preprocess.rst:125
msgid ""
"之后使用 :class:`paddle.io.BatchSampler` 和 :func:`batchify_fn` 构建 "
":class:`paddle.io.DataLoader` ："
msgstr "After that, use :class:`paddle.io.BatchSampler` and :func:`batchify_fn` to build :class:`paddle.io.DataLoader`. "

#: ../../data_prepare/data_preprocess.rst:135
msgid "到此，一个完整的数据准备流程就完成了。关于更多batchify方法，请移步collate。"
msgstr "At this point, a entire data preparation process is completed. To find out more batchify methonds, please read collate. "

#: ../../data_prepare/data_preprocess.rst:139
msgid ""
"当需要进行 **单机多卡** 训练时，需要将 :class:`BatchSampler` 更换为 "
":class:`DistributedBatchSampler` 。更多有关 :class:`paddle.io.BatchSampler` "
"的信息，请移步 `BatchSampler "
"<https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/fluid/dataloader/batch_sampler/BatchSampler_cn.html>`_。"
msgstr ""
"When training with **multipul graphic card in single PC**, :class:`BatchSampler` needs to be changed to :class:`DistributedBatchSampler`. "
"To find out more informaton about :class:`paddle.io.BatchSampler`, please read `BatchSampler "
"<https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/fluid/dataloader/batch_sampler/BatchSampler_cn.html>`_."


#: ../../data_prepare/data_preprocess.rst:141
msgid ""
"当需要诸如batch内排序，按token组batch等更复杂的组batch功能时。可以使用PaddleNLP内置的 "
":class:`SamplerHelper` 。相关用例请参考 `reader.py "
"<https://github.com/PaddlePaddle/PaddleNLP/blob/develop/examples/machine_translation/transformer/reader.py>`__。"
msgstr ""
"When more complex group batch functions such as sorting within batches, group batching by token, etc. are required,"
"we can use PaddleNLP built in :class:`SamplerHelper`. Please read `reader.py for the example."
"<https://github.com/PaddlePaddle/PaddleNLP/blob/develop/examples/machine_translation/transformer/reader.py>`__。"

#: ../../data_prepare/data_preprocess.rst:144
msgid "基于非预训练模型的数据处理"
msgstr "Data processing based on non-pretrained models"

#: ../../data_prepare/data_preprocess.rst:146
msgid ""
"在使用非预训练模型做NLP任务时，我们可以借助PaddleNLP内置的 :class:`JiebaTokenizer` 和 "
":class:`Vocab` 完成数据处理的相关功能，整体流程与使用预训练模型基本相似。我们以中文情感分析 :obj:`ChnSentiCorp`"
" 数据集为例："
msgstr ""
"When using non-pretrained models for NLP tasks, we can use PaddleNLP built in :class:`JiebaTokenizer` and :class:`Vocab` to complete data processing."
"The prcedure is almost the same as when using pretrained models. "
"Let's take a look the example of Chinese sentiment analysis :obj:`ChnSentiCorp` dataset:"

#: ../../data_prepare/data_preprocess.rst:167
msgid ""
":class:`Vocab` 除了可以从本地词典文件初始化之外，还提供多种初始化方法，包括从 :class:`dictionary` "
"创建、从数据集创建等。详情请移步Vocab。"
msgstr ":class:`Vocab can be initialised from not only the local file. There are many other ways for the initialization,"
"which includes from :class:`dictionary`, create from dataset, etc. Please refer to Vocab for more information."

#: ../../data_prepare/data_preprocess.rst:168
msgid ""
"除了使用内置的 :class:`JiebaTokenizer` 外，用户还可以使用任何自定义的方式或第三方库进行分词，之后使用 "
":func:`Vocab.to_indices` 方法将token转为id。"
msgstr ""
"Other than using built in :class:`JiebaTokenizer`, users can also use any customised way or 3rd party library for word segmentation."
"Then, use :func:`Vocab.to_indices` to convert token into id. "

#: ../../data_prepare/data_preprocess.rst:170
msgid "之后与基于预训练模型的数据处理流程相似，编写数据处理函数并传入 :func:`map` 方法："
msgstr "After that, it is almost the same as the pre-trained data processing procedure. Write data processing function, then pass it into :func:`map` method."

#: ../../data_prepare/data_preprocess.rst:193
msgid ""
"可以看到，原始数据已经被处理成了 *feature* 。但是这里我们发现单条数据并不是一个 **字典** ，而是 **元组** 。所以我们的 "
":func:`batchify_fn` 也要相应的做一些调整："
msgstr ""
"As we can see, the raw data has already become *feature*. However, the single data here is **tuple** rather than **dictionary**. "
"Therefore, :func:`batchify_fn` needs to be modified accordingly. "

#: ../../data_prepare/data_preprocess.rst:206
msgid ""
"可以看到，:func:`Dict` 函数是将单条数据中的键值与 :func:`Pad` 等函数进行对应，适用于单条数据是字典的情况。而 "
":func:`Tuple` 是通过单条数据中不同部分的index进行对应的。"
msgstr 
"As we can see, :func:`Dict` function is mapping to :func:`Pad` function by using the key value of the single data. It can be used when the single data is disctionay."
":func:`Tuple` is mapping by using the index of the different parts of the single data. "

#: ../../data_prepare/data_preprocess.rst:208
msgid "所以需要 **注意** 的是 :func:`convert_example` 方法和 :func:`batchify_fn` 方法的匹配。"
msgstr "**The point to note** is the match between :func:`convert_example` and :func:`batchify_fn`."

#: ../../data_prepare/data_preprocess.rst:210
msgid "之后的流程与基于预训练模型的数据处理相同。"
msgstr "The procedure after is almost the same as the pre-trained model data processing."

