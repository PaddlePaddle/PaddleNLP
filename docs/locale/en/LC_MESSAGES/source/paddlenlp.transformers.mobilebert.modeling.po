# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.mobilebert.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining:1
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering:1
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification:1
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel:1
msgid "基类：:class:`paddlenlp.transformers.mobilebert.modeling.MobileBertPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:1
msgid ""
"The bare MobileBert Model transformer outputting raw hidden-states. This "
"model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods. This model is also "
"a Paddle `paddle.nn.Layer <https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:8
msgid ""
"Vocabulary size of `inputs_ids` in `MobileBertModel`. Also is the vocab "
"size of token embedding matrix. Defines the number of different tokens "
"that can be represented by the `inputs_ids` passed when calling "
"`MobileBertModel`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:11
msgid ""
"Embedding dimensionality of lookup_table in the embedding layer. Defaults"
" to `128`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:13
msgid ""
"Dimensionality of the embedding layer, encoder layer and pooler layer. "
"Defaults to `512`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:15
msgid "Dimensionality of input_tensor in self attention layer. Defaults to `128`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:17
msgid ""
"Using bottleneck to value tensor in self attention layer. Defaults to "
"`False`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:19
msgid "Key and query shared bottleneck layer. Defaults to `True`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:21
msgid "Number of hidden layers in the Transformer encoder. Defaults to `24`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:23
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `4`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:26
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `512`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:31
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to `\"relu\"`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:35
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:38
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:41
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:44
msgid "The vocabulary size of `token_type_ids`. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:47
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02. .. "
"note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`MobileBertPretrainedModel.init_weights()` "
"for how weights are initialized in `MobileBertModel`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:47
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02. .. "
"note::"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:53
msgid "The index of padding token in the token vocabulary. Defaults to `1`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:56
msgid "Adding the pooling Layer after the encoder layer. Defaults to `True`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel:58
msgid ""
"Using the non-linear activation function in the pooling layer. Defaults "
"to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask:1
msgid "Prepare the head mask if needed."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask:3
msgid ""
"The mask indicating if we should keep the heads or not (1.0 for keep, 0.0"
" for discard)."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask:5
msgid "The number of hidden layers in the model."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask:7
msgid ""
"(:obj:`bool`, `optional`, defaults to :obj:`False`): Whether or not the "
"attentions scores are computed by chunks or not."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask
msgid "返回"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.get_head_mask:10
msgid ""
":obj:`paddle.Tensor` with shape :obj:`[num_hidden_layers x batch x "
"num_heads x seq_length x seq_length]` or list with :obj:`[None]` for each"
" layer."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:1
msgid ""
"The MobileBertModel forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1: - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token. Its data type should be `int64` and it has a shape of"
" [batch_size, sequence_length]. Defaults to `None`, which means we don't "
"add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:16
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:20
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. Defaults to `None`, which means "
"nothing needed to be prevented attention to."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:29
msgid ""
"The mask indicating if we should keep the heads or not (1.0 for keep, 0.0"
" for discard). Defaults to `None`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:31
msgid "Whether to return the output of each hidden layers. Defaults to `None`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:34
msgid ""
"Whether to return the output of each self attention layers. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:38
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`) or (`encoder_outputs`,"
" `pooled_output`). With the fields: - `sequence_output` (Tensor):     "
"Sequence of hidden-states at the last layer of the model.     It's data "
"type should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]. - `pooled_output` (Tensor):     The output of first token "
"(`[CLS]`) in sequence.     We \"pool\" the model by simply taking the "
"hidden state corresponding to the first token.     Its data type should "
"be float32 and its shape is [batch_size, hidden_size]. - "
"`encoder_outputs` (List(Tensor)):     A list of Tensor containing hidden-"
"states of the model at each hidden layer in the Transformer encoder.     "
"The length of the list is `num_hidden_layers`.     Each Tensor has a data"
" type of float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:38
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`) or (`encoder_outputs`,"
" `pooled_output`). With the fields: - `sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:41
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:45
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:44
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:49
msgid "`encoder_outputs` (List(Tensor)):"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:48
msgid ""
"A list of Tensor containing hidden-states of the model at each hidden "
"layer in the Transformer encoder. The length of the list is "
"`num_hidden_layers`. Each Tensor has a data type of float32 and its shape"
" is [batch_size, sequence_length, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:39
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:25
#: paddlenlp.transformers.mobilebert.modeling.MobileBertModel.forward:54
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertPretrainedModel:1
msgid ""
"An abstract class for pretrained MobileBert models. It provides "
"MobileBert related `model_config_file`, `resource_files_names`, "
"`pretrained_resource_files_map`, `pretrained_init_configuration`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining:1
msgid "MobileBert Model with pretraining tasks on top."
msgstr ""

#: of paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining:3
msgid "An instance of :class:`MobileBertModel`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:1
msgid ""
"The MobileBertForPreTraining forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:3
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:5
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:7
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:9
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:11
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:13
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:15
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:17
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:3
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:5
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:7
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:9
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:11
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:13
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:15
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:17
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:3
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:5
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:7
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:9
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:11
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:13
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:15
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:17
msgid "See :class:`MobileBertModel`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:20
msgid ""
"Returns tuple (``prediction_scores``, ``seq_relationship_score``). With "
"the fields: - `prediction_scores` (Tensor):     The scores of masked "
"token prediction. Its data type should be float32.     If "
"`masked_positions` is None, its shape is [batch_size, sequence_length, "
"vocab_size].     Otherwise, its shape is [batch_size, mask_token_num, "
"vocab_size]. - `seq_relationship_score` (Tensor):     The scores of next "
"sentence prediction.     Its data type should be float32 and its shape is"
" [batch_size, 2]."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:20
msgid ""
"Returns tuple (``prediction_scores``, ``seq_relationship_score``). With "
"the fields: - `prediction_scores` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:23
msgid ""
"The scores of masked token prediction. Its data type should be float32. "
"If `masked_positions` is None, its shape is [batch_size, sequence_length,"
" vocab_size]. Otherwise, its shape is [batch_size, mask_token_num, "
"vocab_size]."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:27
msgid "`seq_relationship_score` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForPreTraining.forward:27
msgid ""
"The scores of next sentence prediction. Its data type should be float32 "
"and its shape is [batch_size, 2]."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification:1
msgid ""
"MobileBert Model with a linear layer on top of the output layer, designed"
" for sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering:4
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification:4
msgid "An instance of MobileBert."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification:6
msgid "The number of classes. Defaults to `2`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:1
msgid ""
"The MobileBertForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForSequenceClassification.forward:20
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering:1
msgid ""
"MobileBert Model with a linear layer on top of the hidden-states output "
"to compute `span_start_logits` and `span_end_logits`, designed for "
"question-answering tasks like SQuAD."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:1
msgid ""
"The MobileBertForQuestionAnswering forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:19
msgid ""
"Labels for position (index) of the start of the labelled span for "
"computing the token classification loss. Positions are clamped to the "
"length of the sequence (:obj:`sequence_length`). Position outside of the "
"sequence are not taken into account for computing the loss."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:23
msgid ""
"Labels for position (index) of the end of the labelled span for computing"
" the token classification loss. Positions are clamped to the length of "
"the sequence (:obj:`sequence_length`). Position outside of the sequence "
"are not taken into account for computing the loss."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:28
msgid ""
"Returns tuple (`start_logits`, `end_logits`). With the fields: - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]. - "
"`end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:28
msgid ""
"Returns tuple (`start_logits`, `end_logits`). With the fields: - "
"`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:31
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:34
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.modeling.MobileBertForQuestionAnswering.forward:34
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

