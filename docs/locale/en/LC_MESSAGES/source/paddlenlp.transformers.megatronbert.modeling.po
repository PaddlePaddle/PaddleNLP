# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.megatronbert.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification:1
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:1
msgid "基类：:class:`paddlenlp.transformers.megatronbert.modeling.MegatronBertPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:1
msgid "The bare MegatronBert Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:10
msgid ""
"Vocabulary size of `inputs_ids` in `MegatronBertModel`. Also is the vocab"
" size of token embedding matrix. Defines the number of different tokens "
"that can be represented by the `inputs_ids` passed when calling "
"`MegatronBert`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:13
msgid "Dimensionality of the encoder layer and pooler layer. Defaults to `1024`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:15
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:18
msgid "The vocabulary size of `token_type_ids`. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:21
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to `\"gelu\"`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:25
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:28
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `16`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:31
msgid "Number of hidden layers in the Transformer encoder. Defaults to `24`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:33
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:36
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:39
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `4096`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:44
msgid "Type of position embedding. Defaults to \"absolute\""
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:46
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02.  .. "
"note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`MegatronBertPretrainedModel.init_weights()`"
" for how weights are initialized in `MegatronBertModel`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:46
msgid "The standard deviation of the normal initializer. Defaults to 0.02."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel:50
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`MegatronBertPretrainedModel.init_weights()` for how weights "
"are initialized in `MegatronBertModel`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:1
msgid ""
"The MegatronBertModel forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:18
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. If its data type is "
"int, the values should be either 0 or 1.  - **1** for tokens that **not "
"masked**, - **0** for tokens that **masked**.  It is a tensor with shape "
"broadcasted to `[batch_size, num_attention_heads, sequence_length, "
"sequence_length]`. Defaults to `None`, which means nothing needed to be "
"prevented attention to."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. If its data type is "
"int, the values should be either 0 or 1."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:27
msgid "**1** for tokens that **not masked**,"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:28
msgid "**0** for tokens that **masked**."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:30
msgid ""
"It is a tensor with shape broadcasted to `[batch_size, "
"num_attention_heads, sequence_length, sequence_length]`. Defaults to "
"`None`, which means nothing needed to be prevented attention to."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:34
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`).  With the fields:  - "
"`sequence_output` (Tensor):     Sequence of hidden-states at the last "
"layer of the model.     It's data type should be float32 and its shape is"
" [batch_size, sequence_length, hidden_size].  - `pooled_output` (Tensor):"
"     The output of first token (`[CLS]`) in sequence.     We \"pool\" the"
" model by simply taking the hidden state corresponding to the first "
"token.     Its data type should be float32 and its shape is [batch_size, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:34
msgid "Returns tuple (`sequence_output`, `pooled_output`)."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:14
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:14
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:36
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:40
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:39
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:44
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:43
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:21
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:21
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:19
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:19
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:27
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:26
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:16
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:19
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertModel.forward:49
msgid "示例"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertPretrainedModel:1
msgid ""
"An abstract class for pretrained MegatronBert models. It provides RoBerta"
" related `model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertPretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering:1
msgid "MegatronBert Model with question answering tasks."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification:3
msgid "An instance of :class:`MegatronBertModel`."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:1
msgid ""
"The MegatronBertForQuestionAnswering forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:9
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:3
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:7
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:9
msgid "See :class:`MegatronBertModel`."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:12
msgid ""
"Returns tuple (`start_logits`, `end_logits`).  With the fields:  - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:12
msgid "Returns tuple (`start_logits`, `end_logits`)."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:18
msgid "`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:17
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:21
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForQuestionAnswering.forward:21
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification:1
msgid "MegatronBert Model with sequence classification tasks."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification:5
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification:5
msgid "The number of labels."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:1
msgid ""
"The MegatronBertForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForSequenceClassification.forward:12
msgid "Returns tensor `logits`, a tensor of the sequence classification logits."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction:1
msgid ""
"MegatronBert Model with a `next sentence prediction (classification)` "
"head on top."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:1
msgid ""
"The MegatronBertForNextSentencePrediction forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:12
msgid ""
"Returns Tensor `seq_relationship_scores`. The scores of next sentence "
"prediction.         Its data type should be float32 and its shape is "
"[batch_size, 2]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:14
msgid ""
"Returns Tensor `seq_relationship_scores`. The scores of next sentence "
"prediction."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForNextSentencePrediction.forward:15
msgid "Its data type should be float32 and its shape is [batch_size, 2]."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM:1
msgid "MegatronBert Model with a `causal masked language modeling` head on top."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:1
msgid ""
"The MegatronBertForCausalLM forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:12
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:12
msgid ""
"Returns Tensor `prediction_scores`. The scores of masked token "
"prediction.         Its data type should be float32. If "
"`masked_positions` is None, its shape is         [batch_size, "
"sequence_length, vocab_size]. Otherwise, its shape is         "
"[batch_size, mask_token_num, vocab_size]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:16
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:16
msgid "Returns Tensor `prediction_scores`. The scores of masked token prediction."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForCausalLM.forward:15
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:15
msgid ""
"Its data type should be float32. If `masked_positions` is None, its shape"
" is [batch_size, sequence_length, vocab_size]. Otherwise, its shape is "
"[batch_size, mask_token_num, vocab_size]."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining:1
msgid "Megatronbert Model with pretraining tasks on top."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:1
msgid ""
"The MegatronBertForPreTraining forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:12
msgid ""
"Returns tuple (`prediction_scores`, `seq_relationship_score`).  With the "
"fields:  - `prediction_scores` (Tensor):     The scores of masked token "
"prediction. Its data type should be float32.     If `masked_positions` is"
" None, its shape is [batch_size, sequence_length, vocab_size].     "
"Otherwise, its shape is [batch_size, mask_token_num, vocab_size].  - "
"`seq_relationship_score` (Tensor):     The scores of next sentence "
"prediction.     Its data type should be float32 and its shape is "
"[batch_size, 2]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:12
msgid "Returns tuple (`prediction_scores`, `seq_relationship_score`)."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:19
msgid "`prediction_scores` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:17
msgid ""
"The scores of masked token prediction. Its data type should be float32. "
"If `masked_positions` is None, its shape is [batch_size, sequence_length,"
" vocab_size]. Otherwise, its shape is [batch_size, mask_token_num, "
"vocab_size]."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:22
msgid "`seq_relationship_score` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForPreTraining.forward:22
msgid ""
"The scores of next sentence prediction. Its data type should be float32 "
"and its shape is [batch_size, 2]."
msgstr ""

#: of paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM:1
msgid "MegatronBert Model with a `masked language modeling` head on top."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMaskedLM.forward:1
msgid ""
"The MegatronBertForMaskedLM forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice:1
msgid "MegatronBert Model with a multiple choice classification head on top."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:1
msgid ""
"The MegatronBertForMultipleChoice forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:12
msgid ""
"Returns Tensor `reshaped_logits`. A tensor of the multiple choice "
"classification logits.         Shape as `[batch_size, num_choice]` and "
"dtype as `float32`."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:14
msgid ""
"Returns Tensor `reshaped_logits`. A tensor of the multiple choice "
"classification logits."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForMultipleChoice.forward:15
msgid "Shape as `[batch_size, num_choice]` and dtype as `float32`."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification:1
msgid "MegatronBert Model with a token classification head on top."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:1
msgid ""
"The MegatronBertForTokenClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits.         Shape as `[batch_size, sequence_length, num_classes]` and"
" dtype as `float32`."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:14
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits."
msgstr ""

#: of
#: paddlenlp.transformers.megatronbert.modeling.MegatronBertForTokenClassification.forward:15
msgid ""
"Shape as `[batch_size, sequence_length, num_classes]` and dtype as "
"`float32`."
msgstr ""

