# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.reformer.tokenizer.rst:2
msgid "tokenizer"
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:1
msgid "基类：:class:`paddlenlp.transformers.albert.tokenizer.AlbertEnglishTokenizer`"
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:1
msgid ""
"Constructs a Reformer tokenizer based on SentencePiece . This tokenizer "
"inherits from "
":class:`~paddlenlp.transformers.tokenizer_utils.PretrainedTokenizer` "
"which contains most of the main methods. For more information regarding "
"those methods, please refer to this superclass."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:6
msgid ""
"The vocabulary file (ends with '.spm') required to instantiate a "
"`SentencePiece <https://github.com/google/sentencepiece>`__ tokenizer."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:9
msgid ""
"Whether or not to lowercase the input when tokenizing. Defaults to "
"`False`."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:11
msgid "Whether or note to remove space when tokenizing. Defaults to `True`."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:13
msgid "Whether or note to keep accents when tokenizing. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:15
msgid ""
"A special token representing the *eos (end-of-sentence)* token. Defaults "
"to \"</s>\"."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:18
msgid ""
"A special token representing the *unknown (out-of-vocabulary)* token. An "
"unknown token is set to be `unk_token` inorder to be converted to an ID. "
"Defaults to \"<unk>\"."
msgstr ""

#: of paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer:22
msgid ""
"A special token used to make arrays of tokens the same size for batching "
"purposes. Defaults to \"<unk>\"."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:1
msgid "Build model inputs from a sequence or a pair of sequence."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:3
msgid "An Reformer sequence has the following format:"
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:5
msgid "single sequence:      ``X``"
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:6
msgid "pair of sequences:        ``A B ``"
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:8
msgid "List of IDs to which the special tokens will be added."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:10
msgid "Optional second list of IDs for sequence pairs. Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences
msgid "返回"
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens:13
msgid "List of input_id with the appropriate special tokens."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences:1
msgid "Create a mask from the two sequences."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences:3
msgid ""
"If `token_ids_1` is `None`, this method only returns the first portion of"
" the mask (0s)."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences:5
msgid "List of IDs."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences:7
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of
#: paddlenlp.transformers.reformer.tokenizer.ReformerTokenizer.create_token_type_ids_from_sequences:10
msgid "List of token_type_id according to the given sequence(s)."
msgstr ""

