# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.luke.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification:1
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification:1
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification:1
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM:1
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering:1
#: paddlenlp.transformers.luke.modeling.LukeModel:1
msgid "基类：:class:`paddlenlp.transformers.luke.modeling.LukePretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:1
msgid "The bare Luke Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward
#: paddlenlp.transformers.luke.modeling.LukeModel
#: paddlenlp.transformers.luke.modeling.LukeModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:10
msgid ""
"Vocabulary size of `inputs_ids` in `LukeModel`. Also is the vocab size of"
" token embedding matrix. Defines the number of different tokens that can "
"be represented by the `inputs_ids` passed when calling `LukeModel`. "
"Defaults to 50267."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:14
msgid ""
"Dimensionality of the embedding layer, encoder layer and pooler layer. "
"Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:16
msgid "Number of hidden layers in the Transformer encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:18
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:21
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `3072`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:26
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to `\"gelu\"`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:30
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:33
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:36
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`514`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:39
msgid "The vocabulary size of `token_type_ids`. Defaults to `1`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:42
msgid ""
"Vocabulary size of `entity_ids` in `LukeModel`. Also is the vocab size of"
" token entity embedding matrix. Defines the number of different entity "
"that can be represented by the `entity_ids` passed when calling "
"`LukeModel`. Defaults to 500000."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:46
msgid "Dimensionality of the entity embedding layer Defaults to `256`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:48
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02.  .. "
"note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`BertPretrainedModel.init_weights()` for how"
" weights are initialized in `BertModel`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:48
msgid "The standard deviation of the normal initializer. Defaults to 0.02."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:52
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`BertPretrainedModel.init_weights()` for how weights are "
"initialized in `BertModel`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:55
msgid "The index of padding token in the token vocabulary. Defaults to `1`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel:58
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:1
msgid "The LukeModel forward method, overrides the `__call__()` special method."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:18
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. Defaults to `None`, which means "
"nothing needed to be prevented attention to."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:31
msgid ""
"Indices of entity sequence tokens in the entity vocabulary. They are "
"numerical representations of entities that build the entity input "
"sequence. Its data type should be `int64` and it has a shape of "
"[batch_size, entity_sequence_length]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:35
msgid ""
"Indices of positions of each entity sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_entity_tokens)` and dtype as int64. Defaults "
"to `None`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:39
msgid ""
"Segment entity token indices to indicate different portions of the entity"
" inputs. Selected in the range ``[0, type_vocab_size - 1]``. If "
"`type_vocab_size` is 2, which means the inputs have two portions. Indices"
" can either be 0 or 1:"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:44
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor will be concat with `attention_mask`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward
#: paddlenlp.transformers.luke.modeling.LukeModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:53
msgid ""
"Returns tuple (`word_hidden_state, entity_hidden_state, pool_output`).  "
"With the fields:  - `word_hidden_state` (Tensor):     Sequence of hidden-"
"states at the last layer of the model.     It's data type should be "
"float32 and its shape is [batch_size, sequence_length, hidden_size].  - "
"`entity_hidden_state` (Tensor):     Sequence of entity hidden-states at "
"the last layer of the model.     It's data type should be float32 and its"
" shape is [batch_size, sequence_length, hidden_size].  - `pooled_output` "
"(Tensor):     The output of first token (`<s>`) in sequence.     We "
"\"pool\" the model by simply taking the hidden state corresponding to the"
" first token.     Its data type should be float32 and its shape is "
"[batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:53
msgid "Returns tuple (`word_hidden_state, entity_hidden_state, pool_output`)."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:22
#: paddlenlp.transformers.luke.modeling.LukeModel.forward:55
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:59
msgid "`word_hidden_state` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:58
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:63
msgid "`entity_hidden_state` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:62
msgid ""
"Sequence of entity hidden-states at the last layer of the model. It's "
"data type should be float32 and its shape is [batch_size, "
"sequence_length, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:67
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeModel.forward:66
msgid ""
"The output of first token (`<s>`) in sequence. We \"pool\" the model by "
"simply taking the hidden state corresponding to the first token. Its data"
" type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward
#: paddlenlp.transformers.luke.modeling.LukeModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:25
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:25
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:27
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:34
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:31
#: paddlenlp.transformers.luke.modeling.LukeModel.forward:72
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukePretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukePretrainedModel:1
msgid ""
"An abstract class for pretrained Luke models. It provides Luke related "
"`model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukePretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification:1
msgid ""
"The LUKE model with a span classification head on top (a linear layer on "
"top of the hidden states output) for tasks such as named entity "
"recognition."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification:4
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification:4
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification:4
msgid "An instance of LukeModel."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification:6
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification:6
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification:6
msgid "The number of classes."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:1
msgid ""
"The LukeForEntitySpanClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:3
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:4
msgid "The start position of entities in sequence."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:3
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:5
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:9
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:11
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:13
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:15
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:17
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:3
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:5
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:9
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:11
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:13
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:15
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:17
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:5
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:7
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:11
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:13
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:15
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:17
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:19
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:3
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:5
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:9
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:11
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:13
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:15
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:17
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:3
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:5
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:9
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:11
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:13
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:15
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:17
msgid "See :class:`LukeModel`."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:7
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:7
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:9
#: paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:7
#: paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:7
msgid "See :class: `LukeModel`"
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntitySpanClassification.forward:22
msgid ""
"Returns tensor `logits`, a tensor of the entity span classification "
"logits. Shape as `[batch_size, num_entities, num_classes]` and dtype as "
"float32."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification:1
msgid ""
"The LUKE model with a classification head on top (a linear layer on top "
"of the hidden states of the two entity tokens) for entity pair "
"classification tasks, such as TACRED."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:1
msgid ""
"The LukeForEntityPairClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityPairClassification.forward:20
msgid ""
"Returns tensor `logits`, a tensor of the entity pair classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForEntityClassification:1
msgid ""
"The LUKE model with a classification head on top (a linear layer on top "
"of the hidden state of the first entity token) for entity classification "
"tasks, such as Open Entity."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:1
msgid ""
"The LukeForEntityClassification forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.luke.modeling.LukeForEntityClassification.forward:20
msgid ""
"Returns tensor `logits`, a tensor of the entity classification logits. "
"Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM:1
msgid "Luke Model with a `masked language modeling` head on top."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM:3
msgid "An instance of :class:`LukeModel`."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:1
msgid ""
"The LukeForMaskedLM forward method, overrides the __call__() special "
"method."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:20
msgid ""
"Returns tuple (``logits``, ``entity_logits``).  With the fields:  - "
"`logits` (Tensor):     The scores of masked token prediction.     Its "
"data type should be float32 and shape is [batch_size, sequence_length, "
"vocab_size].  - `entity_logits` (Tensor):     The scores of masked entity"
" prediction.     Its data type should be float32 and its shape is "
"[batch_size, entity_length, entity_vocab_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:20
msgid "Returns tuple (``logits``, ``entity_logits``)."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:26
msgid "`logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:25
msgid ""
"The scores of masked token prediction. Its data type should be float32 "
"and shape is [batch_size, sequence_length, vocab_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:29
msgid "`entity_logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForMaskedLM.forward:29
msgid ""
"The scores of masked entity prediction. Its data type should be float32 "
"and its shape is [batch_size, entity_length, entity_vocab_size]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering:1
msgid ""
"LukeBert Model with question answering tasks. :param luke: An instance of"
" :class:`LukeModel`. :type luke: :class:`LukeModel`"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:1
msgid ""
"The LukeForQuestionAnswering forward method, overrides the __call__() "
"special method."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:20
msgid ""
"Returns tuple (`start_logits`, `end_logits`). With the fields: - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]. - "
"`end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:20
msgid ""
"Returns tuple (`start_logits`, `end_logits`). With the fields: - "
"`start_logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:23
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:26
msgid "`end_logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.luke.modeling.LukeForQuestionAnswering.forward:26
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

