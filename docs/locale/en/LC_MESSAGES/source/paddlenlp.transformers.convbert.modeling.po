# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.convbert.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator:1
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice:1
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering:1
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification:1
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification:1
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining:1
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator:1
#: paddlenlp.transformers.convbert.modeling.ConvBertModel:1
msgid "基类：:class:`paddlenlp.transformers.convbert.modeling.ConvBertPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:1
msgid "The bare ConvBert Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertClassificationHead.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator
#: paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertModel
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:10
msgid ""
"Vocabulary size of `inputs_ids` in `ConvBertModel`. Also is the vocab "
"size of token embedding matrix. Defines the number of different tokens "
"that can be represented by the `inputs_ids` passed when calling "
"`ConvBertModel`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:13
msgid "Dimensionality of the embedding layer. Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:15
msgid "Dimensionality of the encoder layer and pooler layer. Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:17
msgid "Number of hidden layers in the Transformer encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:19
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:22
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `3072`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:27
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to `\"gelu\"`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:31
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:34
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:37
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:40
msgid "The vocabulary size of `token_type_ids`. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:43
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02.  .. "
"note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`ConvBertPretrainedModel.init_weights()` for"
" how weights are initialized in `ConvBertModel`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:43
msgid "The standard deviation of the normal initializer. Defaults to 0.02."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:47
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`ConvBertPretrainedModel.init_weights()` for how weights are "
"initialized in `ConvBertModel`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:50
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:53
msgid "The size of the convolutional kernel. Defaults to `9`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:56
msgid "Ratio gamma to reduce the number of attention heads. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel:59
msgid ""
"The number of groups for grouped linear layers for ConvBert model. "
"Defaults to `1`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:1
msgid ""
"The ConvBertModel forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:12
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:12
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:13
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:13
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:15
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:15
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:18
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:18
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:18
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:22
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:22
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. If its data type is "
"int, the values should be either 0 or 1.  - **1** for tokens that **not "
"masked**, - **0** for tokens that **masked**.  It is a tensor with shape "
"broadcasted to `[batch_size, num_attention_heads, sequence_length, "
"sequence_length]`. Defaults to `None`, which means nothing needed to be "
"prevented attention to."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:22
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:22
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. If its data type is "
"int, the values should be either 0 or 1."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:27
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:27
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:27
msgid "**1** for tokens that **not masked**,"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:28
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:28
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:28
msgid "**0** for tokens that **masked**."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:30
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:30
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:30
msgid ""
"It is a tensor with shape broadcasted to `[batch_size, "
"num_attention_heads, sequence_length, sequence_length]`. Defaults to "
"`None`, which means nothing needed to be prevented attention to."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:34
msgid ""
"Returns Tensor `sequence_output`, sequence of hidden-states at the last "
"layer of the model. Shape as `[batch_size, sequence_length, hidden_size]`"
" and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward
msgid "返回类型"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:39
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:17
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:26
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:17
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:17
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:39
#: paddlenlp.transformers.convbert.modeling.ConvBertModel.forward:39
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertPretrainedModel:1
msgid ""
"An abstract class for pretrained ConvBert models. It provides ConvBert "
"related `model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainedModel.init_weights:1
msgid "Initializes and tie weights if needed."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainedModel.tie_weights:1
msgid "Tie the weights between the input embeddings and the output embeddings."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining:1
msgid ""
"Combine generator with discriminator for Replaced Token Detection (RTD) "
"pretraining."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.get_discriminator_inputs:1
msgid "Sample from the generator to create discriminator input."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:5
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:9
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:5
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:9
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:5
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:9
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:1
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:5
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:28
msgid "See :class:`ConvBertModel`."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:9
msgid ""
"The raw input_ids. Its data type should be `int64` and it has a shape of "
"[batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:11
msgid ""
"The generator labels. Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:14
msgid ""
"Returns tuple (``gen_logits``, ``disc_logits``, ``disc_labels``, "
"``attention_mask``).  With the fields:  - `gen_logits` (Tensor):     a "
"tensor of the generator prediction logits. Shape as `[batch_size, "
"sequence_length, vocab_size]` and dtype as float32.  - `disc_logits` "
"(Tensor):     a tensor of the discriminator prediction logits. Shape as "
"`[batch_size, sequence_length]` and dtype as float32.  - `disc_labels` "
"(Tensor):     a tensor of the discriminator prediction labels. Shape as "
"`[batch_size, sequence_length]` and dtype as int64.  - `attention_mask` "
"(Tensor):     See :class:`ConvBertModel`."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:14
msgid ""
"Returns tuple (``gen_logits``, ``disc_logits``, ``disc_labels``, "
"``attention_mask``)."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:14
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:16
msgid "With the fields:"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:19
msgid "`gen_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:19
msgid ""
"a tensor of the generator prediction logits. Shape as `[batch_size, "
"sequence_length, vocab_size]` and dtype as float32."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:22
msgid "`disc_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:22
msgid ""
"a tensor of the discriminator prediction logits. Shape as `[batch_size, "
"sequence_length]` and dtype as float32."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:25
msgid "`disc_labels` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:25
msgid ""
"a tensor of the discriminator prediction labels. Shape as `[batch_size, "
"sequence_length]` and dtype as int64."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTotalPretraining.forward:27
msgid "`attention_mask` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator:1
msgid "ConvBert Model with a discriminator prediction head on top."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator:3
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice:4
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering:4
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification:4
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification:4
#: paddlenlp.transformers.convbert.modeling.ConvBertGenerator:3
msgid "An instance of ConvBertModel."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:1
msgid ""
"The ConvBertDiscriminator forward method, overrides the `__call__()` "
"special method."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertDiscriminator.forward:34
msgid ""
"Returns tensor `logits`, a tensor of the discriminator prediction logits."
" Shape as `[batch_size, sequence_length]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertGenerator:1
msgid "ConvBert Model with a generator prediction head on top."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:1
msgid ""
"The ConvBertGenerator forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertGenerator.forward:34
msgid ""
"Returns tensor `prediction_scores`, a tensor of the generator prediction "
"scores. Shape as `[batch_size, sequence_length, vocab_size]` and dtype as"
" float32."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertClassificationHead:1
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion:1
msgid "基类：:class:`paddle.fluid.dygraph.layers.Layer`"
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertClassificationHead:1
msgid "ConvBert head for sentence-level classification tasks."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertClassificationHead.forward:1
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion.forward:1
msgid ""
"Defines the computation performed at every call. Should be overridden by "
"all subclasses."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertClassificationHead.forward:4
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion.forward:4
msgid "unpacked tuple arguments"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertClassificationHead.forward:6
#: paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion.forward:6
msgid "unpacked dict arguments"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification:1
msgid ""
"ConvBert Model with a linear layer on top of the output layer, designed "
"for sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification:6
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification:6
msgid "The number of classes. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice:8
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification:8
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification:8
msgid ""
"The dropout probability for output of ConvBert. If None, use the same "
"value as `hidden_dropout_prob` of `ConvBertModel` instance `convbert`. "
"Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:1
msgid ""
"The ConvBertForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForSequenceClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification:1
msgid ""
"ConvBert Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:1
msgid ""
"The ConvBertForTokenClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForTokenClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits. Shape as `[batch_size, sequence_length, num_classes]` and dtype "
"as `float32`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion:1
msgid ""
"Vocabulary size of `inputs_ids` in `ConvBertModel`. Defines the number of"
" different tokens that can be represented by the `inputs_ids` passed when"
" calling `ConvBertModel`."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion:4
msgid "This is the generator weight."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertPretrainingCriterion:6
msgid "This is the discriminator weight."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering:1
msgid ""
"ConvBert Model with a linear layer on top of the hidden-states output to "
"compute `span_start_logits` and `span_end_logits`, designed for question-"
"answering tasks like SQuAD."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:1
msgid ""
"The ConvBertForQuestionAnswering forward method, overrides the __call__()"
" special method."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:12
msgid ""
"Returns tuple (`start_logits`, `end_logits`).  With the fields:  - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:12
msgid "Returns tuple (`start_logits`, `end_logits`)."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:18
msgid "`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:17
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:21
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForQuestionAnswering.forward:21
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice:1
msgid ""
"ConvBert Model with a linear layer on top of the hidden-states output "
"layer, designed for multiple choice tasks like RocStories/SWAG tasks ."
msgstr ""

#: of paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice:6
msgid "The number of choices. Defaults to `2`."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:1
msgid ""
"The ConvBertForMultipleChoice forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:3
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:5
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:7
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:9
msgid ""
"See :class:`ConvBertModel` and shape as [batch_size,num_choice, "
"sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.convbert.modeling.ConvBertForMultipleChoice.forward:12
msgid ""
"Returns tensor `reshaped_logits`, a tensor of the multiple choice "
"classification logits. Shape as `[batch_size, num_choice]` and dtype as "
"`float32`."
msgstr ""

