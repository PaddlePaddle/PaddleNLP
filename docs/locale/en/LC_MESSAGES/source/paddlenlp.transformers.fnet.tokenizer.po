# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.fnet.tokenizer.rst:2
msgid "tokenizer"
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer:1
msgid "Tokenization class for FNet model."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:1
msgid "基类：:class:`paddlenlp.transformers.albert.tokenizer.AlbertEnglishTokenizer`"
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:1
msgid ""
"Construct a FNet tokenizer. Inherit from :class:`AlbertEnglishTokenizer`."
" Based on `SentencePiece <https://github.com/google/sentencepiece>`__."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.save_resources
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:4
msgid ""
"`SentencePiece <https://github.com/google/sentencepiece>`__ file "
"(generally has a `.spm` extension) that contains the vocabulary necessary"
" to instantiate a tokenizer."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:7
msgid "Whether or not to lowercase the input when tokenizing."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:9
msgid ""
"Whether or not to strip the text when tokenizing (removing excess spaces "
"before and after the string)."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:11
msgid "Whether or not to keep accents when tokenizing."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:13
msgid ""
"The unknown token. A token that is not in the vocabulary cannot be "
"converted to an ID and is set to be this token instead."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:16
msgid ""
"The separator token, which is used when building a sequence from multiple"
" sequences, e.g. two sequences for sequence classification or for a text "
"and a question for question answering. It is also used as the last token "
"of a sequence built with special tokens."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:20
msgid ""
"The token used for padding, for example when batching sequences of "
"different lengths."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:22
msgid ""
"The classifier token which is used when doing sequence classification "
"(classification of the whole sequence instead of per-token "
"classification). It is the first token of the sequence when built with "
"special tokens."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:25
msgid ""
"The token used for masking values. This is the token used when training "
"this model with masked language modeling. This is the token which the "
"model will try to predict."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:28
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:  - ``enable_sampling``: Enable subword "
"regularization. - ``nbest_size``: Sampling parameters for unigram. "
"Invalid for BPE-Dropout.    - ``nbest_size = {0,1}``: No sampling is "
"performed.   - ``nbest_size > 1``: samples from the nbest_size results."
"   - ``nbest_size < 0``: assuming that nbest_size is infinite and samples"
" from the all hypothesis (lattice)     using forward-filtering-and-"
"backward-sampling algorithm. - ``alpha``: Smoothing parameter for unigram"
" sampling, and dropout probability of merge operations for   BPE-dropout."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:28
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:"
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:31
msgid "``enable_sampling``: Enable subword regularization."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:32
msgid "``nbest_size``: Sampling parameters for unigram. Invalid for BPE-Dropout."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:34
msgid "``nbest_size = {0,1}``: No sampling is performed."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:35
msgid "``nbest_size > 1``: samples from the nbest_size results."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:36
msgid ""
"``nbest_size < 0``: assuming that nbest_size is infinite and samples from"
" the all hypothesis (lattice) using forward-filtering-and-backward-"
"sampling algorithm."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:38
msgid ""
"``alpha``: Smoothing parameter for unigram sampling, and dropout "
"probability of merge operations for BPE-dropout."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:44
msgid ""
"The `SentencePiece` processor that is used for every conversion (string, "
"tokens and IDs)."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer
msgid "type"
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer:46
msgid ":obj:`SentencePieceProcessor`"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.convert_tokens_to_string:1
msgid "Converts a sequence of tokens (strings for sub-words) in a single string."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:1
msgid ""
"Build model inputs from a sequence or a pair of sequence for sequence "
"classification tasks by concatenating and adding special tokens. An FNet "
"sequence has the following format:"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:4
msgid "single sequence: ``[CLS] X [SEP]``"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:5
msgid "pair of sequences: ``[CLS] A [SEP] B [SEP]``"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:7
msgid "List of IDs to which the special tokens will be added."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:9
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences:10
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask
msgid "返回"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:12
msgid ""
"List of `input IDs <../glossary.html#input-ids>`__ with the appropriate "
"special tokens."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.build_inputs_with_special_tokens:13
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences:15
msgid ":obj:`List[int]`"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:1
msgid ""
"Retrieves sequence ids from a token list that has no special tokens "
"added. This method is called when adding special tokens using the "
"tokenizer ``encode`` methods."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:4
msgid "List of ids of the first sequence."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:6
msgid "List of ids of the second sequence."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:8
msgid ""
"Whether or not the token list is already formatted with special tokens "
"for the model. Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:12
msgid ""
"The list of integers in the range [0, 1]:     1 for a special token, 0 "
"for a sequence token."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:14
msgid "The list of integers in the range [0, 1]:"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.get_special_tokens_mask:15
msgid "1 for a special token, 0 for a sequence token."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences:1
msgid ""
"Create a mask from the two sequences passed to be used in a sequence-pair"
" classification task. An FNet sequence pair mask has the following "
"format: ::"
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences:6
msgid ""
"If :obj:`token_ids_1` is :obj:`None`, this method only returns the first "
"portion of the mask (0s)."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences:8
msgid "List of IDs."
msgstr ""

#: of
#: paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.create_token_type_ids_from_sequences:13
msgid ""
"List of `token type IDs <../glossary.html#token-type-ids>`_ according to "
"the given sequence(s)."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.save_resources:1
msgid ""
"Save tokenizer related resources to `resource_files_names` indicating "
"files under `save_directory` by copying directly. Override it if "
"necessary."
msgstr ""

#: of paddlenlp.transformers.fnet.tokenizer.FNetTokenizer.save_resources:4
msgid "Directory to save files into."
msgstr ""

