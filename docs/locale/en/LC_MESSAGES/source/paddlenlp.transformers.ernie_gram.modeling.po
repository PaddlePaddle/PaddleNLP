# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.ernie_gram.modeling.rst:2
msgid "modeling"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering:1
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification:1
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification:1
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:1
msgid "基类：:class:`paddlenlp.transformers.ernie_gram.modeling.ErnieGramPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:1
msgid "The bare ERNIE-Gram Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:10
msgid ""
"Vocabulary size of the ERNIE-Gram model. Also is the vocab size of token "
"embedding matrix."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:12
msgid ""
"Dimensionality of the embedding layer, encoder layers and pooler layer. "
"Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:14
msgid "Number of hidden layers in the Transformer encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:16
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:19
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `3072`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:24
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to ``\"gelu\"``."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:28
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoders. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:31
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:34
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:37
msgid "The vocabulary size of the `token_type_ids`. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:40
msgid ""
"The standard deviation of the normal initializer for initializing all "
"weight matrices. Defaults to `0.02`.  .. note::     A normal_initializer "
"initializes weight matrices as normal distributions.     See "
":meth:`ErniePretrainedModel._init_weights()` for how weights are "
"initialized in `ErnieGramModel`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:40
msgid ""
"The standard deviation of the normal initializer for initializing all "
"weight matrices. Defaults to `0.02`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:44
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`ErniePretrainedModel._init_weights()` for how weights are "
"initialized in `ErnieGramModel`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:47
msgid ""
"The relative position size just for ERNIE-Gram English model. Defaults to"
" None."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel:49
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:1
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. It's data type "
"should be `int64` and has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:5
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices can be either 0 or 1:  - 0 corresponds to a **sentence "
"A** token, - 1 corresponds to a **sentence B** token.  It's data type "
"should be `int64` and has a shape of [batch_size, sequence_length]. "
"Defaults to None, which means no segment embeddings is added to token "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:5
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices can be either 0 or 1:"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:8
msgid "0 corresponds to a **sentence A** token,"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:9
msgid "1 corresponds to a **sentence B** token."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:11
msgid ""
"It's data type should be `int64` and has a shape of [batch_size, "
"sequence_length]. Defaults to None, which means no segment embeddings is "
"added to token embeddings."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:14
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``. Defaults to `None`. Shape as `(batch_sie, num_tokens)` and dtype as"
" `int32` or `int64`."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:18
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. For example, its shape can be  "
"[batch_size, sequence_length], [batch_size, sequence_length, "
"sequence_length], [batch_size, num_attention_heads, sequence_length, "
"sequence_length]. We use whole-word-mask in ERNIE, so the whole word will"
" have the same value. For example, \"使用\" as a word, \"使\" and \"用\" will"
" have the same value. Defaults to `None`, which means nothing needed to "
"be prevented attention to."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:32
msgid ""
"Returns tuple (``sequence_output``, ``pooled_output``).  With the fields:"
"  - `sequence_output` (Tensor):     Sequence of hidden-states at the last"
" layer of the model.     It's data type should be float32 and its shape "
"is [batch_size, sequence_length, hidden_size].  - `pooled_output` "
"(Tensor):     The output of first token (`[CLS]`) in sequence.     We "
"\"pool\" the model by simply taking the hidden state corresponding to the"
" first token.     Its data type should be float32 and its shape is "
"[batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:32
msgid "Returns tuple (``sequence_output``, ``pooled_output``)."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:12
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:34
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:38
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:37
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:42
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:41
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:24
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward:15
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward:15
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramModel.forward:47
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.ernie_gram.modeling.ErnieGramPretrainedModel:1
msgid ""
"An abstract class for pretrained ERNIE-Gram models. It provides ERNIE-"
"Gram related `model_config_file`, `resource_files_names`, "
"`pretrained_resource_files_map`, `pretrained_init_configuration`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramPretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification:1
msgid ""
"ERNIE-Gram Model with a linear layer on top of the output layer, designed"
" for sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification:4
msgid "An instance of `paddlenlp.transformers.ErnieGramModel`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification:6
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification:6
msgid "The number of classes. Default to `2`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification:8
msgid ""
"The dropout probability for output of ERNIE-Gram. If None, use the same "
"value as `hidden_dropout_prob` of `paddlenlp.transformers.ErnieGramModel`"
" instance. Defaults to `None`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:1
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:3
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:5
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:7
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward:1
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward:3
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward:5
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward:7
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward:1
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward:3
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward:5
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward:7
msgid "See :class:`ErnieGramModel`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForSequenceClassification.forward:10
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification:1
msgid ""
"ERNIE-Gram Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering:5
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification:4
msgid "An instance of `ErnieGramModel`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification:8
msgid ""
"The dropout probability for output of ERNIE-Gram. If None, use the same "
"value as `hidden_dropout_prob` of `ErnieGramModel` instance `ernie_gram`."
" Defaults to `None`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForTokenClassification.forward:10
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits. Shape as `[batch_size, sequence_length, num_classes]` and dtype "
"as `float32`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering:1
msgid ""
"ERNIE-Gram Model with a linear layer on top of the hidden-states output "
"to compute `span_start_logits` and `span_end_logits`, designed for "
"question-answering tasks like SQuAD.."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:10
msgid ""
"Returns tuple (`start_logits`, `end_logits`).  With the fields:  - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:10
msgid "Returns tuple (`start_logits`, `end_logits`)."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:16
msgid "`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:15
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:19
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_gram.modeling.ErnieGramForQuestionAnswering.forward:19
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

