# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-19 14:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../source/paddlenlp.utils.file_lock.rst:2
msgid "file\\_lock"
msgstr ""

#: of paddlenlp.utils.file_lock.FileLockException:1
msgid "基类：:class:`Exception`"
msgstr ""

#: of paddlenlp.utils.file_lock.FileLock:1
msgid "基类：:class:`object`"
msgstr ""

#: of paddlenlp.utils.file_lock.FileLock:1
msgid ""
"A file locking mechanism that has context-manager support so you can use "
"it in a with statement. This should be relatively cross compatible as it "
"doesn't rely on msvcrt or fcntl for the locking."
msgstr ""

#: of paddlenlp.utils.file_lock.FileLock.acquire:1
msgid ""
"Acquire the lock, if possible. If the lock is in use, it check again "
"every `wait` seconds. It does this until it either gets the lock or "
"exceeds `timeout` number of seconds, in which case it throws an "
"exception."
msgstr ""

#: of paddlenlp.utils.file_lock.FileLock.release:1
msgid ""
"Get rid of the lock by deleting the lockfile. When working in a `with` "
"statement, this gets automatically called at the end."
msgstr ""

