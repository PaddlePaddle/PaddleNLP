# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-16 16:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.layers.crf.rst:2
msgid "crf"
msgstr ""

#~ msgid "基类：:class:`paddle.fluid.dygraph.layers.Layer`"
#~ msgstr ""

#~ msgid ""
#~ "LinearChainCrf is a linear chain "
#~ "Conditional Random Field layer, it can"
#~ " implement sequential dependencies in the"
#~ " predictions. Therefore, it can take "
#~ "context into account whereas a "
#~ "classifier predicts a label for a "
#~ "single sample without considering "
#~ "\"neighboring\" samples. See "
#~ "https://repository.upenn.edu/cgi/viewcontent.cgi?article=1162&context=cis_papers"
#~ " for reference."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The batch size."
#~ msgstr ""

#~ msgid "The label number."
#~ msgstr ""

#~ msgid "The crf layer learning rate."
#~ msgstr ""

#~ msgid ""
#~ "If set to True, the start tag "
#~ "and stop tag will be considered, "
#~ "the transitions params will be a "
#~ "tensor with shape `[num_labels+2, "
#~ "num_labels+2]`. Else, the transitions params"
#~ " will be a tensor with shape "
#~ "`[num_labels, num_labels]`."
#~ msgstr ""

#~ msgid ""
#~ "Computes the normalization in a "
#~ "linear-chain CRF. See "
#~ "http://www.cs.columbia.edu/~mcollins/fb.pdf for reference."
#~ " $$ F = logZ(x) = log\\sum_y "
#~ "exp(score(x,y)) $$ $$ score(x,y) = "
#~ "\\sum_i Emit(x_i,y_i) + Trans(y_{i-1}, y_i)"
#~ " $$ mark $$ p(y_i) = Emit(x_i,y_i),"
#~ " T(y_{i-1}, y_i)=Trans(y_{i-1}, y_i) $$ "
#~ "then we can get $$ F(1) = "
#~ "log\\sum_{y1} exp(p(y_1) + T([START], y1)) "
#~ "$$ $$ F(2) = log\\sum_{y1}\\sum_{y2} "
#~ "exp(p(y_1) + T([START], y1) + p(y_2) "
#~ "+ T(y_1,y_2)) =  log\\sum_{y2} exp(F(1) "
#~ "+ p(y_2) + T(y_1,y_2)) $$ $$ "
#~ "F(...) = ... $$ A recursive "
#~ "formula."
#~ msgstr ""

#~ msgid "The input tensor with shape `[batch_size, sequence_length, num_tags]`."
#~ msgstr ""

#~ msgid "The input length with shape `[batch_size]`."
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "The normalizers tensor, with shape `[batch_size]`."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ""
#~ "Computes the unnormalized score for a"
#~ " tag sequence. $$ score(x,y) = "
#~ "\\sum_i Emit(x_i,y_i) + Trans(y_{i-1}, y_i)"
#~ " $$"
#~ msgstr ""

#~ msgid "The label tensor with shape `[batch_size, sequence_length]`"
#~ msgstr ""

#~ msgid "The unnormalized sequence scores tensor, with shape `[batch_size]`."
#~ msgstr ""

#~ msgid ""
#~ "The negative log-likelihood for linear"
#~ " chain Conditional Random Field (CRF)."
#~ msgstr ""

#~ msgid ""
#~ "let $$ Z(x) = \\sum_{y'}exp(score(x,y')) "
#~ "$$, means the sum of all path "
#~ "scores, then we have $$ loss = "
#~ "-logp(y|x) = -log(exp(score(x,y))/Z(x)) = "
#~ "-score(x,y) + logZ(x) $$"
#~ msgstr ""

#~ msgid "The LinearChainCrf network."
#~ msgstr ""

#~ msgid ""
#~ "Defines the computation performed at "
#~ "every call. Should be overridden by "
#~ "all subclasses."
#~ msgstr ""

#~ msgid "unpacked tuple arguments"
#~ msgstr ""

#~ msgid "unpacked dict arguments"
#~ msgstr ""

#~ msgid ""
#~ "ViterbiDecoder can decode the highest "
#~ "scoring sequence of tags, it should "
#~ "only be used at test time."
#~ msgstr ""

#~ msgid "The transition matrix with shape `[num_tags, num_tags]`."
#~ msgstr ""

#~ msgid ""
#~ "If set to True, the last row "
#~ "and the last column of transitions "
#~ "will be considered as start tag, "
#~ "the the penultimate row and the "
#~ "penultimate column of transitions will "
#~ "be considered as stop tag. Else, "
#~ "all the rows and columns will be"
#~ " considered as the real tag."
#~ msgstr ""

#~ msgid "Decode the highest scoring sequence of tags."
#~ msgstr ""

#~ msgid ""
#~ "The unary emission tensor with shape "
#~ "`[batch_size, sequence_length, num_tags]`."
#~ msgstr ""

#~ msgid ""
#~ "The input length tensor with shape "
#~ "`[batch_size]`, storing real length of "
#~ "each sequence for correctness."
#~ msgstr ""

#~ msgid ""
#~ "The scores tensor containing the score"
#~ " for the Viterbi sequence, with shape"
#~ " `[batch_size]`. paths: The paths tensor"
#~ " containing the highest scoring tag "
#~ "indices, with shape `[batch_size, "
#~ "sequence_length`]."
#~ msgstr ""

