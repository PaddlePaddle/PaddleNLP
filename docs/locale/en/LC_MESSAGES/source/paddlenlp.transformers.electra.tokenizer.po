# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-16 16:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.electra.tokenizer.rst:2
msgid "tokenizer"
msgstr ""

#~ msgid "基类：:class:`paddlenlp.transformers.tokenizer_utils.PretrainedTokenizer`"
#~ msgstr ""

#~ msgid ""
#~ "Constructs a Electra tokenizer. It uses"
#~ " a basic tokenizer to do punctuation"
#~ " splitting, lower casing and so on,"
#~ " and follows a WordPiece tokenizer to"
#~ " tokenize as subwords. :param vocab_file:"
#~ " file path of the vocabulary :type"
#~ " vocab_file: str :param do_lower_case: "
#~ "Whether the text strips accents and "
#~ "convert to"
#~ msgstr ""

#~ msgid "lower case. Default: `True`. Default: True."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The special token for unkown words. Default: \"[UNK]\"."
#~ msgstr ""

#~ msgid "The special token for separator token . Default: \"[SEP]\"."
#~ msgstr ""

#~ msgid "The special token for padding. Default: \"[PAD]\"."
#~ msgstr ""

#~ msgid "The special token for cls. Default: \"[CLS]\"."
#~ msgstr ""

#~ msgid "The special token for mask. Default: \"[MASK]\"."
#~ msgstr ""

#~ msgid "实际案例"
#~ msgstr ""

#~ msgid ""
#~ "return the size of vocabulary. :returns:"
#~ " the size of vocabulary. :rtype: int"
#~ msgstr ""

#~ msgid ""
#~ "End-to-end tokenization for Electra "
#~ "models. :param text: The text to "
#~ "be tokenized. :type text: str"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "A list of string representing converted tokens."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ""
#~ "Converts a sequence of tokens (list "
#~ "of string) in a single string. "
#~ "Since the usage of WordPiece introducing"
#~ " `##` to concat subwords, also remove"
#~ " `##` when converting. :param tokens: "
#~ "A list of string representing tokens "
#~ "to be converted. :type tokens: list"
#~ msgstr ""

#~ msgid "Converted string from tokens."
#~ msgstr ""

#~ msgid ""
#~ "Returns the number of added tokens "
#~ "when encoding a sequence with special"
#~ " tokens. .. note::"
#~ msgstr ""

#~ msgid ""
#~ "Returns the number of added tokens "
#~ "in the case of a sequence pair "
#~ "if set to True, returns the number"
#~ " of added tokens in the case of"
#~ " a single sequence if set to "
#~ "False."
#~ msgstr ""

#~ msgid "Number of tokens added to sequences"
#~ msgstr ""

#~ msgid ""
#~ "Build model inputs from a sequence "
#~ "or a pair of sequence for sequence"
#~ " classification tasks by concatenating and"
#~ " adding special tokens."
#~ msgstr ""

#~ msgid "A ELECTRA sequence has the following format: ::"
#~ msgstr ""

#~ msgid "List of IDs to which the special tokens will be added."
#~ msgstr ""

#~ msgid "Optional second list of IDs for sequence pairs."
#~ msgstr ""

#~ msgid "List of input_id with the appropriate special tokens."
#~ msgstr ""

#~ msgid ":obj:`List[int]`"
#~ msgstr ""

#~ msgid ""
#~ "Build offset map from a pair of"
#~ " offset map by concatenating and "
#~ "adding offsets of special tokens."
#~ msgstr ""

#~ msgid "A ELECTRA offset_mapping has the following format: ::"
#~ msgstr ""

#~ msgid "List of char offsets to which the special tokens will be added."
#~ msgstr ""

#~ msgid "Optional second list of char offsets for offset mapping pairs."
#~ msgstr ""

#~ msgid "List of char offsets with the appropriate offsets of special tokens."
#~ msgstr ""

#~ msgid ":obj:`List[tuple]`"
#~ msgstr ""

#~ msgid ""
#~ "Create a mask from the two "
#~ "sequences passed to be used in a"
#~ " sequence-pair classification task. A "
#~ "ELECTRA sequence pair mask has the "
#~ "following format: ::"
#~ msgstr ""

#~ msgid ""
#~ "If :obj:`token_ids_1` is :obj:`None`, this "
#~ "method only returns the first portion"
#~ " of the mask (0s). :param "
#~ "token_ids_0: List of IDs. :type "
#~ "token_ids_0: :obj:`List[int]` :param token_ids_1:"
#~ " Optional second list of IDs for "
#~ "sequence pairs. :type token_ids_1: "
#~ ":obj:`List[int]`, `optional`"
#~ msgstr ""

#~ msgid "List of token_type_id according to the given sequence(s)."
#~ msgstr ""

#~ msgid ""
#~ "Retrieves sequence ids from a token "
#~ "list that has no special tokens "
#~ "added. This method is called when "
#~ "adding special tokens using the "
#~ "tokenizer ``encode`` methods."
#~ msgstr ""

#~ msgid "List of ids of the first sequence."
#~ msgstr ""

#~ msgid "List of ids of the second sequence."
#~ msgstr ""

#~ msgid ""
#~ "Whether or not the token list is"
#~ " already formatted with special tokens "
#~ "for the model. Defaults to None."
#~ msgstr ""

#~ msgid ""
#~ "The list of integers in the range"
#~ " [0, 1]: 1 for a special token,"
#~ " 0 for a sequence token."
#~ msgstr ""

