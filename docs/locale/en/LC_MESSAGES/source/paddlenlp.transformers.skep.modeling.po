# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.skep.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepForSequenceClassification:1
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification:1
#: paddlenlp.transformers.skep.modeling.SkepModel:1
msgid "基类：:class:`paddlenlp.transformers.skep.modeling.SkepPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:1
msgid "The bare SKEP Model outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:10
msgid ""
"More details refer to `SKEP <https://www.aclweb.org/anthology/2020.acl-"
"main.374>`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepModel
#: paddlenlp.transformers.skep.modeling.SkepModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:12
msgid ""
"Vocabulary size of `inputs_ids` in `SKEPModel`. Defines the number of "
"different tokens that can be represented by the `inputs_ids` passed when "
"calling `SKEPModel`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:15
msgid ""
"Dimensionality of the embedding layer, encoder layers and the pooler "
"layer. Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:17
msgid "Number of hidden layers in the Transformer encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:19
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:22
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `3072`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:27
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to ``\"gelu\"``."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:31
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to ``0.1``."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:34
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:37
msgid ""
"The maximum value of the dimensionality of position encoding. The "
"dimensionality of position encoding is the dimensionality of the sequence"
" in `TinyBertModel`. Defaults to `512`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:41
msgid ""
"The vocabulary size of the `token_type_ids` passed when calling "
"`~transformers.SkepModel`. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:44
msgid ""
"The standard deviation of the normal initializer. Defaults to `0.02`.  .."
" note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`SkepPretrainedModel.init_weights()` for how"
" weights are initialized in `SkepModel`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:44
msgid "The standard deviation of the normal initializer. Defaults to `0.02`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:48
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`SkepPretrainedModel.init_weights()` for how weights are "
"initialized in `SkepModel`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel:51
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:1
msgid "The SkepModel forward method, overrides the `__call__()` special method."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:18
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention to some "
"unwanted positions, usually the paddings or the subsequent positions. Its"
" data type can be int, float and bool. When the data type is bool, the "
"`masked` tokens have `False` values and the others have `True` values. "
"When the data type is int, the `masked` tokens have `0` values and the "
"others have `1` values. When the data type is float, the `masked` tokens "
"have `-INF` values and the others have `0` values. It is a tensor with "
"shape broadcasted to `[batch_size, num_attention_heads, sequence_length, "
"sequence_length]`. For example, its shape can be  [batch_size, "
"sequence_length], [batch_size, sequence_length, sequence_length], "
"[batch_size, num_attention_heads, sequence_length, sequence_length]. "
"Defaults to `None`, which means nothing needed to be prevented attention "
"to."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:34
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`).  With the fields:  - "
"`sequence_output` (Tensor):     Sequence of hidden-states at the last "
"layer of the model.     It's data type should be float32 and its shape is"
" [batch_size, sequence_length, hidden_size].  - `pooled_output` (Tensor):"
"     The output of first token (`[CLS]`) in sequence.     We \"pool\" the"
" model by simply taking the hidden state corresponding to the first "
"token.     Its data type should be float32 and its shape is [batch_size, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:34
msgid "Returns tuple (`sequence_output`, `pooled_output`)."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:36
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:40
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:39
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:44
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepModel.forward:43
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward
#: paddlenlp.transformers.skep.modeling.SkepModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:17
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:17
#: paddlenlp.transformers.skep.modeling.SkepModel.forward:49
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepPretrainedModel:1
msgid ""
"An abstract class for pretrained Skep models. It provides Skep related "
"`model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepPretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepForSequenceClassification:1
msgid ""
"SKEP Model with a linear layer on top of the pooled output, designed for "
"sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification:4
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification:4
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification:4
msgid "An instance of SkepModel."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepForSequenceClassification:6
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification:6
msgid "The number of classes. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepForSequenceClassification:8
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification:8
msgid ""
"The dropout probability for output of SKEP. If None, use the same value "
"as `hidden_dropout_prob` of `SkepModel` instance `skep`. Defaults to "
"None."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:1
msgid ""
"The SkepForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:3
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:5
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:7
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:9
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:3
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:5
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:7
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:9
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:3
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:5
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:7
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:9
msgid "See :class:`SkepModel`."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepForSequenceClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepForTokenClassification:1
msgid ""
"SKEP Model with a linear layer on top of the hidden-states output layer, "
"designed for token classification tasks like NER tasks."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:1
msgid ""
"The SkepForTokenClassification forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepForTokenClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits. Shape as `[batch_size, sequence_length, num_classes]` and dtype "
"as `float32`."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification:1
msgid "基类：:class:`paddle.fluid.dygraph.layers.Layer`"
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification:1
msgid ""
"SKEPCRF Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification:6
msgid "The number of classes."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:1
msgid ""
"The SkepCrfForTokenClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:11
msgid ""
"The input length tensor storing real length of each sequence for "
"correctness. Its data type should be int64 and its shape is "
"`[batch_size]`. Defaults to `None`."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:15
msgid ""
"The input label tensor. Its data type should be int64 and its shape is "
"`[batch_size, sequence_length]`."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:19
msgid ""
"Returns tensor `loss` if `labels` is not None. Otherwise, returns tensor "
"`prediction`.  - `loss` (Tensor):     The crf loss. Its data type is "
"float32 and its shape is `[batch_size]`.  - `prediction` (Tensor):     "
"The prediction tensor containing the highest scoring tag indices.     Its"
" data type is int64 and its shape is `[batch_size, sequence_length]`."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:19
msgid ""
"Returns tensor `loss` if `labels` is not None. Otherwise, returns tensor "
"`prediction`."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:22
msgid "`loss` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:22
msgid "The crf loss. Its data type is float32 and its shape is `[batch_size]`."
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:25
msgid "`prediction` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.skep.modeling.SkepCrfForTokenClassification.forward:25
msgid ""
"The prediction tensor containing the highest scoring tag indices. Its "
"data type is int64 and its shape is `[batch_size, sequence_length]`."
msgstr ""

