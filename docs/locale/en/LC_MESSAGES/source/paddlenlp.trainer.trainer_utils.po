# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-19 14:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../source/paddlenlp.trainer.trainer_utils.rst:2
msgid "trainer\\_utils"
msgstr ""

#: of paddlenlp.trainer.trainer_utils:1
msgid "Utilities for the Trainer class."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.ExplicitEnum:1
msgid "基类：:class:`enum.Enum`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.ExplicitEnum:1
msgid "Enum with more explicit error message for missing values."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.BestRun:1
#: paddlenlp.trainer.trainer_utils.EvalLoopOutput:1
#: paddlenlp.trainer.trainer_utils.EvalPrediction:1
#: paddlenlp.trainer.trainer_utils.PredictionOutput:1
#: paddlenlp.trainer.trainer_utils.TrainOutput:1
msgid "基类：:class:`tuple`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.EvalPrediction:1
msgid "Evaluation output (always contains labels), to be used to compute metrics."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.BestRun
#: paddlenlp.trainer.trainer_utils.EvalPrediction
#: paddlenlp.trainer.trainer_utils.default_compute_objective
msgid "参数"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.EvalPrediction:3
msgid "Predictions of the model."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.EvalPrediction:5
msgid "Targets to be matched."
msgstr ""

#: ../docstring of paddlenlp.trainer.trainer_utils.BestRun.run_id:1
#: paddlenlp.trainer.trainer_utils.EvalLoopOutput.predictions:1
#: paddlenlp.trainer.trainer_utils.EvalPrediction.predictions:1
#: paddlenlp.trainer.trainer_utils.PredictionOutput.predictions:1
#: paddlenlp.trainer.trainer_utils.TrainOutput.global_step:1
msgid "Alias for field number 0"
msgstr ""

#: ../docstring of paddlenlp.trainer.trainer_utils.BestRun.objective:1
#: paddlenlp.trainer.trainer_utils.EvalLoopOutput.label_ids:1
#: paddlenlp.trainer.trainer_utils.EvalPrediction.label_ids:1
#: paddlenlp.trainer.trainer_utils.PredictionOutput.label_ids:1
#: paddlenlp.trainer.trainer_utils.TrainOutput.training_loss:1
msgid "Alias for field number 1"
msgstr ""

#: ../docstring of paddlenlp.trainer.trainer_utils.BestRun.hyperparameters:1
#: paddlenlp.trainer.trainer_utils.EvalLoopOutput.metrics:1
#: paddlenlp.trainer.trainer_utils.PredictionOutput.metrics:1
#: paddlenlp.trainer.trainer_utils.TrainOutput.metrics:1
msgid "Alias for field number 2"
msgstr ""

#: ../docstring of paddlenlp.trainer.trainer_utils.EvalLoopOutput.num_samples:1
msgid "Alias for field number 3"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.EvaluationStrategy:1
#: paddlenlp.trainer.trainer_utils.IntervalStrategy:1
#: paddlenlp.trainer.trainer_utils.OptimizerNames:1
#: paddlenlp.trainer.trainer_utils.SchedulerType:1
msgid "基类：:class:`paddlenlp.trainer.trainer_utils.ExplicitEnum`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.EvaluationStrategy:1
#: paddlenlp.trainer.trainer_utils.IntervalStrategy:1
#: paddlenlp.trainer.trainer_utils.SchedulerType:1
msgid "An enumeration."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.OptimizerNames:1
msgid "Stores the acceptable string identifiers for optimizers."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.BestRun:1
msgid ""
"The best run found by an hyperparameter search (see "
"[`~Trainer.hyperparameter_search`])."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.BestRun:3
msgid ""
"The id of the best run (if models were saved, the corresponding "
"checkpoint will be in the folder ending with run-{run_id})."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.BestRun:6
msgid "The objective that was obtained for this run."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.BestRun:8
msgid "The hyperparameters picked to get this run."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.default_compute_objective:1
msgid ""
"The default objective to maximize/minimize when doing an hyperparameter "
"search. It is the evaluation loss if no metrics are provided to the "
"[`Trainer`], the sum of all metrics otherwise."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.default_compute_objective:4
msgid "The metrics returned by the evaluate method."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.default_compute_objective
#: paddlenlp.trainer.trainer_utils.metrics_format
msgid "返回"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.default_compute_objective:7
msgid "The objective to minimize or maximize"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.default_compute_objective
#: paddlenlp.trainer.trainer_utils.metrics_format
msgid "返回类型"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.default_compute_objective:8
msgid "`float`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.is_main_process:1
msgid ""
"Whether or not the current process is the local process, based on "
"`xm.get_ordinal()` (for TPUs) first, then on `local_rank`."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.total_processes_number:1
msgid ""
"Return the number of processes launched in parallel. Works with "
"`paddle.distributed` and TPUs."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.speed_metrics:1
msgid "Measure and return speed performance metrics."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.speed_metrics:3
msgid ""
"This function requires a time snapshot `start_time` before the operation "
"to be measured starts and this function should be run immediately after "
"the operation to be measured has completed."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.speed_metrics:6
msgid "Args:"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.speed_metrics:8
msgid "split: name to prefix metric (like train, eval, test...)"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.speed_metrics:9
msgid "start_time: operation start time"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.speed_metrics:10
msgid "num_samples: number of samples processed"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.metrics_format:1
msgid ""
"Reformat Trainer metrics values to a human-readable format :param "
"metrics: The metrics returned from train/evaluate/predict :type metrics: "
"`Dict[str, float]`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.metrics_format:5
msgid "The reformatted metrics"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.metrics_format:6
msgid "metrics (`Dict[str, float]`)"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.log_metrics:1
msgid ""
"Log metrics in a specially formatted way Under distributed environment "
"this is done only for a process with rank 0. :param split: Mode/split "
"name: one of `train`, `eval`, `test` :type split: `str` :param metrics: "
"The metrics returned from train/evaluate/predictmetrics: metrics dict "
":type metrics: `Dict[str, float]`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.save_metrics:1
msgid ""
"Save metrics into a json file for that split, e.g. `train_results.json`. "
"Under distributed environment this is done only for a process with rank "
"0. :param split: Mode/split name: one of `train`, `eval`, `test`, `all` "
":type split: `str` :param metrics: The metrics returned from "
"train/evaluate/predict :type metrics: `Dict[str, float]` :param combined:"
" Creates combined metrics by updating `all_results.json` with metrics of "
"this call :type combined: `bool`, *optional*, defaults to `True`"
msgstr ""

#: of paddlenlp.trainer.trainer_utils.save_metrics:10
msgid ""
"To understand the metrics please read the docstring of "
"[`~Trainer.log_metrics`]. The only difference is that raw unformatted "
"numbers are saved in the current method."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.save_state:1
msgid ""
"Saves the Trainer state, since Trainer.save_model saves only the "
"tokenizer with the model Under distributed environment this is done only "
"for a process with rank 0."
msgstr ""

#: of paddlenlp.trainer.trainer_utils.has_length:1
msgid "Checks if the dataset implements __len__() and it doesn't raise an error"
msgstr ""

