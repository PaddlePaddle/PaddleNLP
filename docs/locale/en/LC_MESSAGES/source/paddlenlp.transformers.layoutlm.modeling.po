# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.layoutlm.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling:1
msgid "Modeling classes for LayoutLM model."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM:1
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification:1
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification:1
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:1
msgid "基类：:class:`paddlenlp.transformers.layoutlm.modeling.LayoutLMPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:1
msgid "The bare LayoutLM Model outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMModel
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:10
msgid ""
"Vocabulary size of the LayoutLM model. Defines the number of different "
"tokens that can be represented by the `inputs_ids` passed when calling "
"LayoutLMModel."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:13
msgid "Dimensionality of the encoder layers and the pooler layer."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:15
msgid "Number of hidden layers in the Transformer encoder."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:17
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:19
msgid ""
"Dimensionality of the \"intermediate\" (often named feed-forward) layer "
"in the Transformer encoder."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:21
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:25
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:27
msgid "The dropout probability for all fully connected layers in the pooler."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:29
msgid "The vocabulary size of `token_type_ids`. Defaults to `16`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:32
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02.  .. "
"note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`LayoutLMPretrainedModel.init_weights()` for"
" how weights are initialized in `LayoutLMModel`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:32
msgid "The standard deviation of the normal initializer. Defaults to 0.02."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:36
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`LayoutLMPretrainedModel.init_weights()` for how weights are "
"initialized in `LayoutLMModel`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:39
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel:42
msgid ""
"The non-linear activation function in the pooling layer. Defaults to "
"`\"tanh\"`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:1
msgid ""
"The LayoutLMModel forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:18
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. Defaults to `None`, which means "
"nothing needed to be prevented attention to."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:31
msgid "Whether to return the output of each hidden layers. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:35
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`).  With the fields:  - "
"`sequence_output` (Tensor):     Sequence of hidden-states at the last "
"layer of the model.     It's data type should be float32 and its shape is"
" [batch_size, sequence_length, hidden_size].  - `pooled_output` (Tensor):"
"     The output of first token (`[CLS]`) in sequence.     We \"pool\" the"
" model by simply taking the hidden state corresponding to the first "
"token.     Its data type should be float32 and its shape is [batch_size, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:35
msgid "Returns tuple (`sequence_output`, `pooled_output`)."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:37
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:41
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:40
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:45
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward:44
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMModel.forward
msgid "返回类型"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMPretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM:1
msgid "LayoutLM Model with a `masked language modeling` head on top."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM:3
msgid "An instance of :class:`LayoutLMModel`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:1
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:3
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:5
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:7
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:9
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:3
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:5
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:7
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:9
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:11
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:13
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:3
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:5
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:7
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:9
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:11
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:13
msgid "See :class:`LayoutLMModel`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:12
msgid ""
"Returns tensor `prediction_scores`, The scores of masked token "
"prediction. Its data type should be float32 and shape is [batch_size, "
"sequence_length, vocab_size]."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForMaskedLM.forward:17
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:21
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:21
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification:1
msgid ""
"LayoutLM Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification:4
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification:4
msgid "An instance of LayoutLMModel."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification:6
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification:6
msgid "The number of classes. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification:8
msgid ""
"The dropout probability for output of LayoutLM. If None, use the same "
"value as `hidden_dropout_prob` of `LayoutLMModel` instance `layoutlm`. "
"Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:1
msgid ""
"The LayoutLMForTokenClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForTokenClassification.forward:16
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits. Shape as `[batch_size, sequence_length, num_classes]` and dtype "
"as `float32`."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification:1
msgid ""
"LayoutLM Model with a linear layer on top of the output layer, designed "
"for sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:1
msgid ""
"The LayoutLMForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.layoutlm.modeling.LayoutLMForSequenceClassification.forward:16
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

