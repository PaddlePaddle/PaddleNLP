# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.layoutxlm.visual_backbone.rst:2
msgid "visual\\_backbone"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.Conv2d:1
msgid "基类：:class:`paddle.nn.layer.conv.Conv2D`"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.Backbone.forward:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.BasicStem.forward:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.BottleneckBlock.forward:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.Conv2d.forward:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.LastLevelMaxPool.forward:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.VisualBackbone.forward:1
msgid ""
"Defines the computation performed at every call. Should be overridden by "
"all subclasses."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.Backbone.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.BasicStem.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.BottleneckBlock.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.Conv2d.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.FPN.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.LastLevelMaxPool.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage
#: paddlenlp.transformers.layoutxlm.visual_backbone.VisualBackbone.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.get_norm
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.Backbone.forward:4
#: paddlenlp.transformers.layoutxlm.visual_backbone.BasicStem.forward:4
#: paddlenlp.transformers.layoutxlm.visual_backbone.BottleneckBlock.forward:4
#: paddlenlp.transformers.layoutxlm.visual_backbone.Conv2d.forward:4
#: paddlenlp.transformers.layoutxlm.visual_backbone.LastLevelMaxPool.forward:4
#: paddlenlp.transformers.layoutxlm.visual_backbone.VisualBackbone.forward:4
msgid "unpacked tuple arguments"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.Backbone.forward:6
#: paddlenlp.transformers.layoutxlm.visual_backbone.BasicStem.forward:6
#: paddlenlp.transformers.layoutxlm.visual_backbone.BottleneckBlock.forward:6
#: paddlenlp.transformers.layoutxlm.visual_backbone.Conv2d.forward:6
#: paddlenlp.transformers.layoutxlm.visual_backbone.LastLevelMaxPool.forward:6
#: paddlenlp.transformers.layoutxlm.visual_backbone.VisualBackbone.forward:6
msgid "unpacked dict arguments"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.Backbone:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.CNNBlockBase:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.LastLevelMaxPool:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.VisualBackbone:1
msgid "基类：:class:`paddle.fluid.dygraph.layers.Layer`"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ShapeSpec:1
msgid "基类：:class:`paddlenlp.transformers.layoutxlm.visual_backbone._ShapeSpec`"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.get_norm:1
msgid ""
"either one of BN, SyncBN, FrozenBN, GN; or a callable that takes a "
"channel number and returns the normalization layer as a nn.Layer."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.get_norm:5
msgid "out_channels"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.FPN.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage
#: paddlenlp.transformers.layoutxlm.visual_backbone.build_resnet_backbone
#: paddlenlp.transformers.layoutxlm.visual_backbone.get_norm
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.get_norm:8
msgid "the normalization layer"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.FPN.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.forward
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage
#: paddlenlp.transformers.layoutxlm.visual_backbone.build_resnet_backbone
#: paddlenlp.transformers.layoutxlm.visual_backbone.get_norm
msgid "返回类型"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.FrozenBatchNorm:1
msgid "基类：:class:`paddle.fluid.dygraph.nn.BatchNorm`"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.BasicBlock:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.BasicStem:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.BottleneckBlock:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.DeformBottleneckBlock:1
msgid "基类：:class:`paddlenlp.transformers.layoutxlm.visual_backbone.CNNBlockBase`"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.BasicBlock:1
msgid ""
"The basic residual block for ResNet-18 and ResNet-34 defined in "
":paper:`ResNet`, with two 3x3 conv layers and a projection shortcut if "
"needed."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.BottleneckBlock:1
msgid ""
"The standard bottleneck residual block used by ResNet-50, 101 and 152 "
"defined in :paper:`ResNet`.  It contains 3 conv layers with kernels 1x1, "
"3x3, 1x1, and a projection shortcut if needed."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.DeformBottleneckBlock:1
msgid ""
"Similar to :class:`BottleneckBlock`, but with :paper:`deformable conv "
"<deformconv>` in the 3x3 convolution."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.BasicStem:1
msgid ""
"The standard ResNet stem (layers before the first residual block), with a"
" conv, relu and max_pool."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.FPN:1
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet:1
msgid "基类：:class:`paddlenlp.transformers.layoutxlm.visual_backbone.Backbone`"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.forward:1
msgid ""
"Tensor of shape (N,C,H,W). H, W must be a multiple of "
"``self.size_divisibility``."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.forward:3
msgid "names and the corresponding features"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:1
msgid "Create a list of blocks of the same type that forms one ResNet stage."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:3
msgid ""
"a subclass of CNNBlockBase that's used to create all blocks in this "
"stage. A module of this type must not change spatial resolution of inputs"
" unless its stride != 1."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:7
msgid "number of blocks in this stage"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:9
msgid "input channels of the entire stage."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:11
msgid "output channels of **every block** in the stage."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:13
msgid ""
"other arguments passed to the constructor of `block_class`. If the "
"argument name is \"xx_per_block\", the argument is a list of values to be"
" passed to each block in the stage. Otherwise, the same argument is "
"passed to every block in the stage."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:19
msgid "a list of block module."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:22
msgid "Examples: ::"
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_stage:31
msgid ""
"Usually, layers that produce the same feature map spatial size are "
"defined as one \"stage\" (in :paper:`FPN`). Under such definition, "
"``stride_per_block[1:]`` should all be 1."
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:1
msgid ""
"Created list of ResNet stages from pre-defined depth (one of 18, 34, 50, "
"101, 152). If it doesn't create the ResNet variant you need, please use "
":meth:`make_stage` instead for fine-grained customization."
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:5
msgid "depth of ResNet"
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:7
msgid ""
"the CNN block class. Has to accept `bottleneck_channels` argument for "
"depth > 50. By default it is BasicBlock or BottleneckBlock, based on the "
"depth."
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:12
msgid ""
"other arguments to pass to `make_stage`. Should not contain stride and "
"channels, as they are predefined for each depth."
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:15
msgid "modules in all stages; see arguments of     :class:`ResNet.__init__`."
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:17
msgid "modules in all stages; see arguments of"
msgstr ""

#: of
#: paddlenlp.transformers.layoutxlm.visual_backbone.ResNet.make_default_stages:18
msgid ":class:`ResNet.__init__`."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.LastLevelMaxPool:1
msgid ""
"This module is used in the original FPN to generate a downsampled P6 "
"feature from P5."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.FPN.forward:1
msgid ""
"mapping feature map name (e.g., \"res5\") to feature map tensor for each "
"feature level in high to low resolution order."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.FPN.forward:5
msgid ""
"mapping from feature map name to FPN feature map tensor in high to low "
"resolution order. Returned feature names follow the FPN paper convention:"
" \"p<stage>\", where stage has stride = 2 ** stage e.g., [\"p2\", \"p3\","
" ..., \"p6\"]."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.make_stage:1
msgid "Deprecated alias for backward compatibiltiy."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.build_resnet_backbone:1
msgid "Create a ResNet instance from config."
msgstr ""

#: of paddlenlp.transformers.layoutxlm.visual_backbone.build_resnet_backbone:3
msgid "a :class:`ResNet` instance."
msgstr ""

