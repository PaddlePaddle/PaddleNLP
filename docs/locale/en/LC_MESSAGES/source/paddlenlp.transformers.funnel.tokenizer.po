# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.funnel.tokenizer.rst:2
msgid "tokenizer"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer:1
msgid "基类：:class:`paddlenlp.transformers.bert.tokenizer.BertTokenizer`"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.vocab_size:1
msgid ""
"return the size of vocabulary. :returns: the size of vocabulary. :rtype: "
"int"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.tokenize:1
msgid ""
"End-to-end tokenization for BERT models. :param text: The text to be "
"tokenized. :type text: str"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.convert_tokens_to_string
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.num_special_tokens_to_add
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.tokenize
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.tokenize:5
msgid "A list of string representing converted tokens."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.convert_tokens_to_string
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.tokenize
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.convert_tokens_to_string:1
msgid ""
"Converts a sequence of tokens (list of string) in a single string. Since "
"the usage of WordPiece introducing `##` to concat subwords, also remove "
"`##` when converting. :param tokens: A list of string representing tokens"
" to be converted. :type tokens: list"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.convert_tokens_to_string:7
msgid "Converted string from tokens."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.num_special_tokens_to_add:1
msgid ""
"Returns the number of added tokens when encoding a sequence with special "
"tokens."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.num_special_tokens_to_add:5
msgid ""
"This encodes inputs and checks the number of added tokens, and is "
"therefore not efficient. Do not put this inside your training loop."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.num_special_tokens_to_add
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences
msgid "参数"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.num_special_tokens_to_add:8
msgid ""
"Returns the number of added tokens in the case of a sequence pair if set "
"to True, returns the number of added tokens in the case of a single "
"sequence if set to False."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.num_special_tokens_to_add:11
msgid "Number of tokens added to sequences"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens:1
msgid ""
"Build offset map from a pair of offset map by concatenating and adding "
"offsets of special tokens."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens:3
msgid "A BERT offset_mapping has the following format: ::"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens:8
msgid "List of char offsets to which the special tokens will be added."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens:10
msgid "Optional second list of char offsets for offset mapping pairs."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens:13
msgid "List of char offsets with the appropriate offsets of special tokens."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.build_offset_mapping_with_special_tokens:14
msgid ":obj:`List[tuple]`"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences:1
msgid ""
"Create a mask from the two sequences passed to be used in a sequence-pair"
" classification task."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences:3
msgid "A BERT sequence pair mask has the following format: ::"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences:9
msgid ""
"If `token_ids_1` is `None`, this method only returns the first portion of"
" the mask (0s)."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences:11
msgid "A list of `inputs_ids` for the first sequence."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences:13
msgid "Optional second list of IDs for sequence pairs. Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.create_token_type_ids_from_sequences:16
msgid "List of token_type_id according to the given sequence(s)."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask:1
msgid ""
"Retrieves sequence ids from a token list that has no special tokens "
"added. This method is called when adding special tokens using the "
"tokenizer ``encode`` methods."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask:4
msgid "List of ids of the first sequence."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask:6
msgid "List of ids of the second sequence."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask:8
msgid ""
"Whether or not the token list is already formatted with special tokens "
"for the model. Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.get_special_tokens_mask:12
msgid ""
"The list of integers in the range [0, 1]: 1 for a special token, 0 for a "
"sequence token."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:1
msgid "Truncates a sequence pair in place to the maximum length."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:3
msgid ""
"list of tokenized input ids. Can be obtained from a string by chaining "
"the `tokenize` and `convert_tokens_to_ids` methods."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:5
msgid ""
"Optional second list of input ids. Can be obtained from a string by "
"chaining the `tokenize` and `convert_tokens_to_ids` methods."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:7
msgid "number of tokens to remove using the truncation strategy"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:9
msgid ""
"string selected in the following options: - 'longest_first' (default) "
"Iteratively reduce the inputs sequence until the input is under "
"max_seq_len     starting from the longest one at each token (when there "
"is a pair of input sequences).     Overflowing tokens only contains "
"overflow from the first sequence. - 'only_first': Only truncate the first"
" sequence. raise an error if the first sequence is shorter or equal to "
"than num_tokens_to_remove. - 'only_second': Only truncate the second "
"sequence - 'do_not_truncate': Does not truncate (raise an error if the "
"input sequence is longer than max_seq_len)"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:9
msgid ""
"string selected in the following options: - 'longest_first' (default) "
"Iteratively reduce the inputs sequence until the input is under "
"max_seq_len"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:11
msgid ""
"starting from the longest one at each token (when there is a pair of "
"input sequences). Overflowing tokens only contains overflow from the "
"first sequence."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:13
msgid ""
"'only_first': Only truncate the first sequence. raise an error if the "
"first sequence is shorter or equal to than num_tokens_to_remove."
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:14
msgid "'only_second': Only truncate the second sequence"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:15
msgid ""
"'do_not_truncate': Does not truncate (raise an error if the input "
"sequence is longer than max_seq_len)"
msgstr ""

#: of
#: paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.truncate_sequences:16
msgid ""
"If set to a number along with max_seq_len, the overflowing tokens "
"returned will contain some tokens from the main sequence returned. The "
"value of this argument defines the number of additional tokens."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:1
msgid ""
"Performs tokenization and uses the tokenized tokens to prepare model "
"inputs. It supports batch inputs of sequence or sequence pair. :param "
"batch_text_or_text_pairs: The element of list can be sequence or sequence"
" pair, and the"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:4
msgid ""
"sequence is a string or a list of strings depending on whether it has "
"been pretokenized. If each sequence is provided as a list of strings "
"(pretokenized), you must set `is_split_into_words` as `True` to "
"disambiguate with a sequence pair."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:9
msgid ""
"If set to a number, will limit the total sequence returned so that it has"
" a maximum length. If there are overflowing tokens, those overflowing "
"tokens will be added to the returned dictionary when "
"`return_overflowing_tokens` is `True`. Defaults to `None`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:14
msgid ""
"Only available for batch input of sequence pair and mainly for question "
"answering usage. When for QA, `text` represents questions and `text_pair`"
" represents contexts. If `stride` is set to a positive number, the "
"context will be split into multiple spans where `stride` defines the "
"number of (tokenized) tokens to skip from the start of one span to get "
"the next span, thus will produce a bigger batch than inputs to include "
"all spans. Moreover, 'overflow_to_sample' and 'offset_mapping' preserving"
" the original example and position information will be added to the "
"returned dictionary. Defaults to 0."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:24
msgid ""
"If set to `True`, the returned sequences would be padded up to "
"`max_seq_len` specified length according to padding side "
"(`self.padding_side`) and padding token id. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:28
msgid ""
"String selected in the following options: - 'longest_first' (default) "
"Iteratively reduce the inputs sequence until the input is under "
"`max_seq_len` starting from the longest one at each token (when there is "
"a pair of input sequences). - 'only_first': Only truncate the first "
"sequence. - 'only_second': Only truncate the second sequence. - "
"'do_not_truncate': Do not truncate (raise an error if the input sequence "
"is longer than `max_seq_len`). Defaults to 'longest_first'."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:38
msgid ""
"Whether to include tokens position ids in the returned dictionary. "
"Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:41
msgid ""
"Whether to include token type ids in the returned dictionary. Defaults to"
" `True`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:44
msgid ""
"Whether to include the attention mask in the returned dictionary. "
"Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:47
msgid ""
"Whether to include the length of each encoded inputs in the returned "
"dictionary. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:50
msgid ""
"Whether to include overflowing token information in the returned "
"dictionary. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:53
msgid ""
"Whether to include special tokens mask information in the returned "
"dictionary. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:57
msgid ""
"The dict has the following optional items: - **input_ids** (list[int]): "
"List of token ids to be fed to a model. - **position_ids** (list[int], "
"optional): List of token position ids to be   fed to a model. Included "
"when `return_position_ids` is `True` - **token_type_ids** (list[int], "
"optional): List of token type ids to be   fed to a model. Included when "
"`return_token_type_ids` is `True`. - **attention_mask** (list[int], "
"optional): List of integers valued 0 or 1,   where 0 specifies paddings "
"and should not be attended to by the   model. Included when "
"`return_attention_mask` is `True`. - **seq_len** (int, optional): The "
"input_ids length. Included when `return_length`   is `True`. - "
"**overflowing_tokens** (list[int], optional): List of overflowing tokens."
"   Included when if `max_seq_len` is specified and "
"`return_overflowing_tokens`   is True. - **num_truncated_tokens** (int, "
"optional): The number of overflowing tokens.   Included when if "
"`max_seq_len` is specified and `return_overflowing_tokens`   is True. - "
"**special_tokens_mask** (list[int], optional): List of integers valued 0 "
"or 1,   with 0 specifying special added tokens and 1 specifying sequence "
"tokens.   Included when `return_special_tokens_mask` is `True`. - "
"**offset_mapping** (list[int], optional): list of pair preserving the   "
"index of start and end char in original input for each token.   For a "
"sqecial token, the index pair is `(0, 0)`. Included when   `stride` "
"works. - **overflow_to_sample** (int, optional): Index of example from "
"which this   feature is generated. Included when `stride` works."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:57
msgid ""
"The dict has the following optional items: - **input_ids** (list[int]): "
"List of token ids to be fed to a model. - **position_ids** (list[int], "
"optional): List of token position ids to be"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:60
msgid "fed to a model. Included when `return_position_ids` is `True`"
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:61
msgid ""
"**token_type_ids** (list[int], optional): List of token type ids to be "
"fed to a model. Included when `return_token_type_ids` is `True`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:63
msgid ""
"**attention_mask** (list[int], optional): List of integers valued 0 or 1,"
" where 0 specifies paddings and should not be attended to by the model. "
"Included when `return_attention_mask` is `True`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:66
msgid ""
"**seq_len** (int, optional): The input_ids length. Included when "
"`return_length` is `True`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:68
msgid ""
"**overflowing_tokens** (list[int], optional): List of overflowing tokens."
" Included when if `max_seq_len` is specified and "
"`return_overflowing_tokens` is True."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:71
msgid ""
"**num_truncated_tokens** (int, optional): The number of overflowing "
"tokens. Included when if `max_seq_len` is specified and "
"`return_overflowing_tokens` is True."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:74
msgid ""
"**special_tokens_mask** (list[int], optional): List of integers valued 0 "
"or 1, with 0 specifying special added tokens and 1 specifying sequence "
"tokens. Included when `return_special_tokens_mask` is `True`."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:77
msgid ""
"**offset_mapping** (list[int], optional): list of pair preserving the "
"index of start and end char in original input for each token. For a "
"sqecial token, the index pair is `(0, 0)`. Included when `stride` works."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.batch_encode:81
msgid ""
"**overflow_to_sample** (int, optional): Index of example from which this "
"feature is generated. Included when `stride` works."
msgstr ""

#: of paddlenlp.transformers.funnel.tokenizer.FunnelTokenizer.rematch:1
msgid ""
"changed from "
"https://github.com/bojone/bert4keras/blob/master/bert4keras/tokenizers.py#L372"
msgstr ""

