# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-16 16:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.transformer.modeling.rst:2
msgid "modeling"
msgstr ""

#~ msgid "Generate the initial values for the sinusoid position encoding table."
#~ msgstr ""

#~ msgid "基类：:class:`paddle.fluid.dygraph.layers.Layer`"
#~ msgstr ""

#~ msgid "Word Embedding + Scale"
#~ msgstr ""

#~ msgid ""
#~ "Defines the computation performed at "
#~ "every call. Should be overridden by "
#~ "all subclasses."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "unpacked tuple arguments"
#~ msgstr ""

#~ msgid "unpacked dict arguments"
#~ msgstr ""

#~ msgid "Positional Embedding"
#~ msgstr ""

#~ msgid "基类：:class:`paddle.fluid.layers.rnn.BeamSearchDecoder`"
#~ msgstr ""

#~ msgid ""
#~ "Tile the batch dimension of a "
#~ "tensor. Specifically, this function takes "
#~ "a tensor t shaped `[batch_size, s0, "
#~ "s1, ...]` composed of minibatch entries"
#~ " `t[0], ..., t[batch_size - 1]` and"
#~ " tiles it to have a shape "
#~ "`[batch_size * beam_size, s0, s1, ...]`"
#~ " composed of minibatch entries `t[0], "
#~ "t[0], ..., t[1], t[1], ...` where "
#~ "each minibatch entry is repeated "
#~ "`beam_size` times."
#~ msgstr ""

#~ msgid ""
#~ "A tensor with shape `[batch_size, ...]`."
#~ " The data type should be float32, "
#~ "float64, int32, int64 or bool."
#~ msgstr ""

#~ msgid "The beam width used in beam search."
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid ""
#~ "A tensor with shape `[batch_size * "
#~ "beam_size, ...]`, whose \\     data type"
#~ " is same as `x`."
#~ msgstr ""

#~ msgid "A tensor with shape `[batch_size * beam_size, ...]`, whose \\"
#~ msgstr ""

#~ msgid "data type is same as `x`."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ""
#~ "Perform a beam search decoding step, "
#~ "which uses `cell` to get probabilities,"
#~ " and follows a beam search step "
#~ "to calculate scores and select candidate"
#~ " token ids."
#~ msgstr ""

#~ msgid ""
#~ "An `int64` tensor with shape `[1]` "
#~ "provided by the caller, representing the"
#~ " current time step number of "
#~ "decoding."
#~ msgstr ""

#~ msgid ""
#~ "A tensor variable. It is same as"
#~ " `initial_inputs` returned by `initialize()` "
#~ "for the first decoding step and "
#~ "`next_inputs` returned by `step()` for "
#~ "the others."
#~ msgstr ""

#~ msgid ""
#~ "A structure of tensor variables. It "
#~ "is same as the `initial_states` returned"
#~ " by `initialize()` for the first "
#~ "decoding step and `beam_search_state` returned"
#~ " by `step()` for the others."
#~ msgstr ""

#~ msgid "Additional keyword arguments, provided by the caller."
#~ msgstr ""

#~ msgid ""
#~ "A tuple( :code:`(beam_search_output, "
#~ "beam_search_state, next_inputs, finished)` ). "
#~ "\\     `beam_search_state` and `next_inputs` "
#~ "have the same structure, \\     shape"
#~ " and data type as the input "
#~ "arguments `states` and `inputs` separately."
#~ " \\     `beam_search_output` is a "
#~ "namedtuple(including scores, predicted_ids, \\"
#~ "     parent_ids as fields) of tensor "
#~ "variables, where \\     `scores, "
#~ "predicted_ids, parent_ids` all has a "
#~ "tensor value shaped \\     `[batch_size, "
#~ "beam_size]` with data type `float32, "
#~ "int64, int64`. \\     `finished` is a"
#~ " `bool` tensor with shape `[batch_size, "
#~ "beam_size]`."
#~ msgstr ""

#~ msgid ""
#~ "A tuple( :code:`(beam_search_output, "
#~ "beam_search_state, next_inputs, finished)` ). "
#~ "\\"
#~ msgstr ""

#~ msgid ""
#~ "`beam_search_state` and `next_inputs` have the"
#~ " same structure, \\ shape and data"
#~ " type as the input arguments `states`"
#~ " and `inputs` separately. \\ "
#~ "`beam_search_output` is a namedtuple(including "
#~ "scores, predicted_ids, \\ parent_ids as "
#~ "fields) of tensor variables, where \\"
#~ " `scores, predicted_ids, parent_ids` all "
#~ "has a tensor value shaped \\ "
#~ "`[batch_size, beam_size]` with data type "
#~ "`float32, int64, int64`. \\ `finished` "
#~ "is a `bool` tensor with shape "
#~ "`[batch_size, beam_size]`."
#~ msgstr ""

#~ msgid "model"
#~ msgstr ""

#~ msgid "基类：:class:`paddlenlp.transformers.transformer.modeling.TransformerModel`"
#~ msgstr ""

