# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.mobilebert.tokenizer.rst:2
msgid "tokenizer"
msgstr ""

#: of paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer:1
msgid "基类：:class:`paddlenlp.transformers.bert.tokenizer.BertTokenizer`"
msgstr ""

#: of paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer:1
msgid ""
"Construct a MobileBERT tokenizer. "
":class:`~paddlenlp.transformers.MobileBertTokenizer is identical to "
":class:`~paddlenlp.transformers.BertTokenizer` and runs end-to-end "
"tokenization: punctuation splitting and wordpiece. Refer to superclass "
":class:`~~paddlenlp.transformers.BertTokenizer` for usage examples and "
"documentation concerning parameters."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:1
msgid ""
"Performs tokenization and uses the tokenized tokens to prepare model "
"inputs. It supports batch inputs of sequence or sequence pair."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode
msgid "参数"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:4
msgid ""
"The element of list can be sequence or sequence pair, and the sequence is"
" a string or a list of strings depending on whether it has been "
"pretokenized. If each sequence is provided as a list of strings "
"(pretokenized), you must set `is_split_into_words` as `True` to "
"disambiguate with a sequence pair."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:10
msgid ""
"If set to a number, will limit the total sequence returned so that it has"
" a maximum length. If there are overflowing tokens, those overflowing "
"tokens will be added to the returned dictionary when "
"`return_overflowing_tokens` is `True`. Defaults to `None`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:15
msgid ""
"Only available for batch input of sequence pair and mainly for question "
"answering usage. When for QA, `text` represents questions and `text_pair`"
" represents contexts. If `stride` is set to a positive number, the "
"context will be split into multiple spans where `stride` defines the "
"number of (tokenized) tokens to skip from the start of one span to get "
"the next span, thus will produce a bigger batch than inputs to include "
"all spans. Moreover, 'overflow_to_sample' and 'offset_mapping' preserving"
" the original example and position information will be added to the "
"returned dictionary. Defaults to 0."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:25
msgid ""
"If set to `True`, the returned sequences would be padded up to "
"`max_seq_len` specified length according to padding side "
"(`self.padding_side`) and padding token id. Defaults to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:29
msgid ""
"String selected in the following options: - 'longest_first' (default) "
"Iteratively reduce the inputs sequence until the input is under "
"`max_seq_len` starting from the longest one at each token (when there is "
"a pair of input sequences). - 'only_first': Only truncate the first "
"sequence. - 'only_second': Only truncate the second sequence. - "
"'do_not_truncate': Do not truncate (raise an error if the input sequence "
"is longer than `max_seq_len`). Defaults to 'longest_first'."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:39
msgid ""
"Whether to include tokens position ids in the returned dictionary. "
"Defaults to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:42
msgid ""
"Whether to include token type ids in the returned dictionary. Defaults to"
" `True`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:45
msgid ""
"Whether to include the attention mask in the returned dictionary. "
"Defaults to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:48
msgid ""
"Whether to include the length of each encoded inputs in the returned "
"dictionary. Defaults to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:51
msgid ""
"Whether to include overflowing token information in the returned "
"dictionary. Defaults to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:54
msgid ""
"Whether to include special tokens mask information in the returned "
"dictionary. Defaults to `False`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode
msgid "返回"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:58
msgid ""
"The dict has the following optional items: - **input_ids** (list[int]): "
"List of token ids to be fed to a model. - **position_ids** (list[int], "
"optional): List of token position ids to be   fed to a model. Included "
"when `return_position_ids` is `True` - **token_type_ids** (list[int], "
"optional): List of token type ids to be   fed to a model. Included when "
"`return_token_type_ids` is `True`. - **attention_mask** (list[int], "
"optional): List of integers valued 0 or 1,   where 0 specifies paddings "
"and should not be attended to by the   model. Included when "
"`return_attention_mask` is `True`. - **seq_len** (int, optional): The "
"input_ids length. Included when `return_length`   is `True`. - "
"**overflowing_tokens** (list[int], optional): List of overflowing tokens."
"   Included when if `max_seq_len` is specified and "
"`return_overflowing_tokens`   is True. - **num_truncated_tokens** (int, "
"optional): The number of overflowing tokens.   Included when if "
"`max_seq_len` is specified and `return_overflowing_tokens`   is True. - "
"**special_tokens_mask** (list[int], optional): List of integers valued 0 "
"or 1,   with 0 specifying special added tokens and 1 specifying sequence "
"tokens.   Included when `return_special_tokens_mask` is `True`. - "
"**offset_mapping** (list[int], optional): list of pair preserving the   "
"index of start and end char in original input for each token.   For a "
"sqecial token, the index pair is `(0, 0)`. Included when   `stride` "
"works. - **overflow_to_sample** (int, optional): Index of example from "
"which this   feature is generated. Included when `stride` works."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:58
msgid ""
"The dict has the following optional items: - **input_ids** (list[int]): "
"List of token ids to be fed to a model. - **position_ids** (list[int], "
"optional): List of token position ids to be"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:61
msgid "fed to a model. Included when `return_position_ids` is `True`"
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:62
msgid ""
"**token_type_ids** (list[int], optional): List of token type ids to be "
"fed to a model. Included when `return_token_type_ids` is `True`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:64
msgid ""
"**attention_mask** (list[int], optional): List of integers valued 0 or 1,"
" where 0 specifies paddings and should not be attended to by the model. "
"Included when `return_attention_mask` is `True`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:67
msgid ""
"**seq_len** (int, optional): The input_ids length. Included when "
"`return_length` is `True`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:69
msgid ""
"**overflowing_tokens** (list[int], optional): List of overflowing tokens."
" Included when if `max_seq_len` is specified and "
"`return_overflowing_tokens` is True."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:72
msgid ""
"**num_truncated_tokens** (int, optional): The number of overflowing "
"tokens. Included when if `max_seq_len` is specified and "
"`return_overflowing_tokens` is True."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:75
msgid ""
"**special_tokens_mask** (list[int], optional): List of integers valued 0 "
"or 1, with 0 specifying special added tokens and 1 specifying sequence "
"tokens. Included when `return_special_tokens_mask` is `True`."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:78
msgid ""
"**offset_mapping** (list[int], optional): list of pair preserving the "
"index of start and end char in original input for each token. For a "
"sqecial token, the index pair is `(0, 0)`. Included when `stride` works."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode:82
msgid ""
"**overflow_to_sample** (int, optional): Index of example from which this "
"feature is generated. Included when `stride` works."
msgstr ""

#: of
#: paddlenlp.transformers.mobilebert.tokenizer.MobileBertTokenizer.batch_encode
msgid "返回类型"
msgstr ""

