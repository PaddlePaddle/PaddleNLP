# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 11:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/paddlenlp.metrics.rouge.rst:2
msgid "rouge"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:1
msgid "基类：:class:`paddle.metric.metrics.Metric`"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:1
msgid ""
"Rouge-L is Recall-Oriented Understudy for Gisting Evaluation based on "
"Longest Common Subsequence (LCS). Longest common subsequence problem "
"takes into account sentence level structure similarity naturally and "
"identifies longest co-occurring in sequence n-grams automatically."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:6
msgid ""
"R_{LCS} & = \\frac{LCS(C,S)}{len(S)}\n"
"\n"
"P_{LCS} & = \\frac{LCS(C,S)}{len(C)}\n"
"\n"
"F_{LCS} & = \\frac{(1 + \\gamma^2)R_{LCS}P_{LCS}}}{R_{LCS} + "
"\\gamma^2{R_{LCS}}"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:14
msgid "where `C` is the candidate sentence, and 'S' is the refrence sentence."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL paddlenlp.metrics.rouge.RougeL.add_inst
#: paddlenlp.metrics.rouge.RougeLForDuReader.add_inst
msgid "参数"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:16
msgid "A hyperparameter to decide the weight of recall. Default: 1.2."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:23
msgid "Examples:(TODO: liujiaqi)"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:20
msgid "Using as a general evaluation object."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL:21
msgid "Using as an instance of `paddle.metric.Metric`."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.lcs:1
msgid "Calculate the length of longest common subsequence of string and sub."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.add_inst:1
#: paddlenlp.metrics.rouge.RougeLForDuReader.add_inst:1
msgid "Update the states based on the a pair of candidate and references."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.add_inst:3
#: paddlenlp.metrics.rouge.RougeLForDuReader.add_inst:3
msgid "The candidate sentence generated by model."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.add_inst:5
#: paddlenlp.metrics.rouge.RougeLForDuReader.add_inst:5
msgid "List of ground truth sentences."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.update:1
msgid "Update states for metric"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.update:3
msgid ""
"Inputs of :code:`update` is the outputs of :code:`Metric.compute`, if "
":code:`compute` is not defined, the inputs of :code:`update` will be "
"flatten arguments of **output** of mode and **label** from data: "
":code:`update(output1, output2, ..., label1, label2,...)`"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.update:8
msgid "see :code:`Metric.compute`"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.accumulate:1
msgid "Calculate the final rouge-l metric."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.reset:1
msgid "Reset states and result"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeL.name:1
msgid "Returns metric name"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeLForDuReader:1
msgid "基类：:class:`paddlenlp.metrics.rouge.RougeL`"
msgstr ""

#: of paddlenlp.metrics.rouge.RougeLForDuReader:1
msgid "Rouge-L metric with bonus for DuReader contest."
msgstr ""

#: of paddlenlp.metrics.rouge.RougeLForDuReader:3
msgid ""
"Please refer to `DuReader "
"Homepage<https://ai.baidu.com//broad/subordinate?dataset=dureader>`_ for "
"more details."
msgstr ""

