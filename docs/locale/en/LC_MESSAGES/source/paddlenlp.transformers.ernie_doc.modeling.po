# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.ernie_doc.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering:1
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification:1
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification:1
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:1
msgid "基类：:class:`paddlenlp.transformers.ernie_doc.modeling.ErnieDocPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:1
msgid "The bare ERNIE-Doc Model outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:6
msgid ""
"This model is also a `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:10
msgid "The number of hidden layers in the Transformer encoder."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:12
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:14
msgid "Dimensionality of the embedding layers, encoder layers and pooler layer."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:16
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:18
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:20
msgid "The dropout probability of FFN."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:22
msgid "The non-linear activation function of FFN."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:24
msgid ""
"The number of tokens to cache. If not 0, the last `memory_len` hidden "
"states in each layer will be cached into memory."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:27
msgid ""
"Vocabulary size of `inputs_ids` in `ErnieDocModel`. Also is the vocab "
"size of token embedding matrix. Defines the number of different tokens "
"that can be represented by the `inputs_ids` passed when calling "
"`ErnieDocModel`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:30
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:33
msgid "The vocabulary size of the `token_type_ids`. Defaults to `3`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:35
msgid ""
"Indicate whether to put layer normalization into preprocessing of MHA and"
" FFN sub-layers. If True, pre-process is layer normalization and post-"
"precess includes dropout, residual connection. Otherwise, no pre-process "
"and post-precess includes dropout, residual connection, layer "
"normalization. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:40
msgid ""
"The `epsilon` parameter used in :class:`paddle.nn.LayerNorm` for "
"initializing layer normalization layers. Defaults to `1e-5`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:43
msgid "Whether to share the relative position parameters. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:46
msgid ""
"The standard deviation of the normal initializer for initializing all "
"weight matrices. Defaults to `0.02`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:49
msgid ""
"The token id of [PAD] token whose parameters won't be updated when "
"training. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel:52
msgid "The token id of [CLS] token. Defaults to `-1`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:1
msgid ""
"The ErnieDocModel forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. It's data type "
"should be `int64` and has a shape of [batch_size, sequence_length, 1]."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:7
msgid ""
"A list of length `n_layers` with each Tensor being a pre-computed hidden-"
"state for each layer. Each Tensor has a dtype `float32` and a shape of "
"[batch_size, sequence_length, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:10
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices can be either 0 or 1:  - 0 corresponds to a **sentence "
"A** token, - 1 corresponds to a **sentence B** token.  It's data type "
"should be `int64` and has a shape of [batch_size, sequence_length, 1]. "
"Defaults to None, which means no segment embeddings is added to token "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:10
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices can be either 0 or 1:"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:13
msgid "0 corresponds to a **sentence A** token,"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:14
msgid "1 corresponds to a **sentence B** token."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:16
msgid ""
"It's data type should be `int64` and has a shape of [batch_size, "
"sequence_length, 1]. Defaults to None, which means no segment embeddings "
"is added to token embeddings."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:19
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``. Shape as `(batch_sie, num_tokens)` and dtype as `int32` or `int64`."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. For example, its shape can be  "
"[batch_size, sequence_length], [batch_size, sequence_length, "
"sequence_length], [batch_size, num_attention_heads, sequence_length, "
"sequence_length]. We use whole-word-mask in ERNIE, so the whole word will"
" have the same value. For example, \"使用\" as a word, \"使\" and \"用\" will"
" have the same value. Defaults to `None`, which means nothing needed to "
"be prevented attention to."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:36
msgid ""
"Returns tuple (``encoder_output``, ``pooled_output``, ``new_mem``).  With"
" the fields:  - `encoder_output` (Tensor):     Sequence of hidden-states "
"at the last layer of the model.     It's data type should be float32 and "
"its shape is [batch_size, sequence_length, hidden_size].  - "
"`pooled_output` (Tensor):     The output of first token (`[CLS]`) in "
"sequence.     We \"pool\" the model by simply taking the hidden state "
"corresponding to the first token.     Its data type should be float32 and"
" its shape is [batch_size, hidden_size].  - `new_mem` (List[Tensor]):"
"     A list of pre-computed hidden-states. The length of the list is "
"`n_layers`.     Each element in the list is a Tensor with dtype `float32`"
" and shape as [batch_size, memory_length, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:36
msgid "Returns tuple (``encoder_output``, ``pooled_output``, ``new_mem``)."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:16
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:16
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:17
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:38
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:42
msgid "`encoder_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:41
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:47
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:45
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:50
msgid "`new_mem` (List[Tensor]):"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:50
msgid ""
"A list of pre-computed hidden-states. The length of the list is "
"`n_layers`. Each element in the list is a Tensor with dtype `float32` and"
" shape as [batch_size, memory_length, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:33
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:29
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:30
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocModel.forward:55
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocPretrainedModel:1
msgid ""
"An abstract class for pretrained ErnieDoc models. It provides ErnieDoc "
"related `model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification:1
msgid ""
"ErnieDoc Model with a linear layer on top of the output layer, designed "
"for sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering:5
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification:4
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification:4
msgid "An instance of :class:`ErnieDocModel`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification:6
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification:6
msgid "The number of classes."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification:8
msgid "The dropout ratio of last output. Default to `0.1`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:1
msgid ""
"The ErnieDocForSequenceClassification forward method, overrides the "
"`__call__()` special method."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:3
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:5
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:7
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:9
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:11
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:3
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:5
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:7
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:9
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:11
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:3
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:5
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:10
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:12
msgid "See :class:`ErnieDocModel`."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:14
msgid ""
"Returns tuple (`logits`, `mem`).  With the fields:  - `logits` (Tensor):"
"     A tensor containing the [CLS] of hidden-states of the model at the "
"output of last layer.     Each Tensor has a data type of `float32` and "
"has a shape of [batch_size, num_classes].  - `mem` (List[Tensor]):     A "
"list of pre-computed hidden-states. The length of the list is `n_layers`."
"     Each element in the list is a Tensor with dtype `float32` and has a "
"shape of     [batch_size, memory_length, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:14
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:15
msgid "Returns tuple (`logits`, `mem`)."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:20
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:21
msgid "`logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:19
msgid ""
"A tensor containing the [CLS] of hidden-states of the model at the output"
" of last layer. Each Tensor has a data type of `float32` and has a shape "
"of [batch_size, num_classes]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:28
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:24
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:25
msgid "`mem` (List[Tensor]):"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:27
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForSequenceClassification.forward:23
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:24
msgid ""
"A list of pre-computed hidden-states. The length of the list is "
"`n_layers`. Each element in the list is a Tensor with dtype `float32` and"
" has a shape of [batch_size, memory_length, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification:1
msgid ""
"ErnieDoc Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering:7
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification:8
msgid "The dropout ratio of last output. Default to 0.1."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:1
msgid ""
"The ErnieDocForTokenClassification forward method, overrides the "
"`__call__()` special method."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:7
msgid ""
"See :class:`ErnieDocModel`. Defaults to None, which means no segment "
"embeddings is added to token embeddings."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:15
msgid ""
"Returns tuple (`logits`, `mem`).  With the fields:  - `logits` (Tensor):"
"     A tensor containing the hidden-states of the model at the output of "
"last layer.     Each Tensor has a data type of `float32` and has a shape "
"of [batch_size, sequence_length, num_classes].  - `mem` (List[Tensor]):"
"     A list of pre-computed hidden-states. The length of the list is "
"`n_layers`.     Each element in the list is a Tensor with dtype `float32`"
" and has a shape of     [batch_size, memory_length, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForTokenClassification.forward:20
msgid ""
"A tensor containing the hidden-states of the model at the output of last "
"layer. Each Tensor has a data type of `float32` and has a shape of "
"[batch_size, sequence_length, num_classes]."
msgstr ""

#: of paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering:1
msgid ""
"ErnieDoc Model with a linear layer on top of the hidden-states output to "
"compute `span_start_logits` and `span_end_logits`, designed for question-"
"answering tasks like SQuAD."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:1
msgid ""
"The ErnieDocForQuestionAnswering forward method, overrides the "
"`__call__()` special method."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:14
msgid ""
"Returns tuple (`start_logits`, `end_logits`, `mem`).  With the fields:  -"
" `start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `mem` (List[Tensor]):     A list of pre-computed hidden-states. The "
"length of the list is `n_layers`.     Each element in the list is a "
"Tensor with dtype `float32` and has a shape of     [batch_size, "
"memory_length, hidden_size]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:14
msgid "Returns tuple (`start_logits`, `end_logits`, `mem`)."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:20
msgid "`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:19
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:24
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.ernie_doc.modeling.ErnieDocForQuestionAnswering.forward:23
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

