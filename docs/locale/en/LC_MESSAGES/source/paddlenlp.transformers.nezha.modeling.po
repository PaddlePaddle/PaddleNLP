# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.nezha.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice:1
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining:1
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering:1
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification:1
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification:1
#: paddlenlp.transformers.nezha.modeling.NeZhaModel:1
msgid "基类：:class:`paddlenlp.transformers.nezha.modeling.NeZhaPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:1
msgid "The bare NeZha Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice
#: paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaModel
#: paddlenlp.transformers.nezha.modeling.NeZhaModel.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:10
msgid ""
"Vocabulary size of `inputs_ids` in `DistilBertModel`. Defines the number "
"of different tokens that can be represented by the `inputs_ids` passed "
"when calling `DistilBertModel`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:13
msgid ""
"Dimensionality of the embedding layer, encoder layers and the pooler "
"layer. Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:15
msgid "Number of hidden layers in the Transformer encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:17
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:20
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `3072`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:25
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to `\"gelu\"`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:29
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:32
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:35
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:38
msgid "The vocabulary size of `token_type_ids`. Defaults to `16`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:41
msgid ""
"The standard deviation of the normal initializer. Defaults to `0.02`.  .."
" note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`NeZhaPretrainedModel.init_weights()` for "
"how weights are initialized in `NeZhaModel`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:41
msgid "The standard deviation of the normal initializer. Defaults to `0.02`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:45
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`NeZhaPretrainedModel.init_weights()` for how weights are "
"initialized in `NeZhaModel`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:48
msgid ""
"The maximum value of the dimensionality of relative encoding, which "
"dictates the maximum supported relative distance of two sentences. "
"Defaults to `64`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:52
msgid ""
"The small value added to the variance in `LayerNorm` to prevent division "
"by zero. Defaults to `1e-12`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel:55
msgid "Whether or not to use relative position embedding. Defaults to `True`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:1
msgid "The NeZhaModel forward method, overrides the `__call__()` special method."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:18
msgid ""
"Mask used in multi-head attention to avoid performing attention to some "
"unwanted positions, usually the paddings or the subsequent positions. Its"
" data type can be int, float and bool. When the data type is bool, the "
"`masked` tokens have `False` values and the others have `True` values. "
"When the data type is int, the `masked` tokens have `0` values and the "
"others have `1` values. When the data type is float, the `masked` tokens "
"have `-INF` values and the others have `0` values. It is a tensor with "
"shape broadcasted to `[batch_size, num_attention_heads, sequence_length, "
"sequence_length]`. For example, its shape can be  [batch_size, "
"sequence_length], [batch_size, sequence_length, sequence_length], "
"[batch_size, num_attention_heads, sequence_length, sequence_length]. We "
"use whole-word-mask in NeZha, so the whole word will have the same value."
" For example, \"使用\" as a word, \"使\" and \"用\" will have the same value."
" Defaults to `None`, which means nothing needed to be prevented attention"
" to."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaModel.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:32
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`).  With the fields:  - "
"`sequence_output` (Tensor):     Sequence of hidden-states at the last "
"layer of the model.     It's data type should be float32 and its shape is"
" [batch_size, sequence_length, hidden_size].  - `pooled_output` (Tensor):"
"     The output of first token (`[CLS]`) in sequence.     We \"pool\" the"
" model by simply taking the hidden state corresponding to the first "
"token.     Its data type should be float32 and its shape is [batch_size, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:32
msgid "Returns tuple (`sequence_output`, `pooled_output`)."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:17
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:12
#: paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:34
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:11
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:38
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:37
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:1
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:42
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:41
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:4
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaModel.forward
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:24
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward:15
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward:15
#: paddlenlp.transformers.nezha.modeling.NeZhaModel.forward:47
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainedModel:1
msgid ""
"An abstract class for pretrained NeZha models. It provides NeZha related "
"`model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel` for more "
"details."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining:1
msgid "NeZha Model with pretraining tasks on top."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining:3
msgid "An instance of :class:`NeZhaModel`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward:3
#: paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward:5
#: paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward:7
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:1
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:3
#: paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:5
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:3
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:5
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:7
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward:3
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward:5
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward:7
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward:3
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward:5
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward:7
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads:3
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads:5
msgid "See :class:`NeZhaModel`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:7
msgid ""
"The labels of the masked language modeling, its dimensionality is equal "
"to `prediction_scores`. Its data type should be int64 and its shape is "
"[batch_size, sequence_length, 1]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:10
msgid ""
"The labels of the next sentence prediction task, the dimensionality of "
"`next_sentence_labels` is equal to `seq_relation_labels`. Its data type "
"should be int64 and its shape is [batch_size, 1]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:14
msgid ""
"Returns Tensor ``total_loss`` if `masked_lm_labels` is not None. Returns "
"tuple (``prediction_scores``, ``seq_relationship_score``) if "
"`masked_lm_labels` is None.  With the fields:  - `total_loss` (Tensor):"
"   - `prediction_scores` (Tensor):     The scores of masked token "
"prediction. Its data type should be float32.     If `masked_positions` is"
" None, its shape is [batch_size, sequence_length, vocab_size].     "
"Otherwise, its shape is [batch_size, mask_token_num, vocab_size].  - "
"`seq_relationship_score` (Tensor):     The scores of next sentence "
"prediction.     Its data type should be float32 and its shape is "
"[batch_size, 2]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:14
msgid ""
"Returns Tensor ``total_loss`` if `masked_lm_labels` is not None. Returns "
"tuple (``prediction_scores``, ``seq_relationship_score``) if "
"`masked_lm_labels` is None."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:19
msgid "`total_loss` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:25
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:16
msgid "`prediction_scores` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:23
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:14
msgid ""
"The scores of masked token prediction. Its data type should be float32. "
"If `masked_positions` is None, its shape is [batch_size, sequence_length,"
" vocab_size]. Otherwise, its shape is [batch_size, mask_token_num, "
"vocab_size]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:28
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:19
msgid "`seq_relationship_score` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForPretraining.forward:28
#: paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:19
msgid ""
"The scores of next sentence prediction. Its data type should be float32 "
"and its shape is [batch_size, 2]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification:1
msgid ""
"NeZha Model with a linear layer on top of the output layer, designed for "
"sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice:4
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering:4
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification:4
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification:4
msgid "An instance of NeZhaModel."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification:6
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification:6
msgid "The number of classes. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification:8
msgid ""
"The dropout probability for output of NeZha. If None, use the same value "
"as `hidden_dropout_prob` of `NeZhaModel` instance `nezha`. Defaults to "
"None."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward:1
msgid ""
"The NeZhaForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForSequenceClassification.forward:10
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads:1
msgid "基类：:class:`paddle.fluid.dygraph.layers.Layer`"
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads:1
msgid "Perform language modeling task and next sentence classification task."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads:7
msgid "Activation function used in the language modeling task."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads:9
msgid ""
"Decoding weights used to map hidden_states to logits of the masked token "
"prediction. Its data type should be float32 and its shape is [vocab_size,"
" hidden_size]. Defaults to `None`, which means use the same weights of "
"the embedding layer."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:9
msgid ""
"Returns tuple (``prediction_scores``, ``seq_relationship_score``).  With "
"the fields:  - `prediction_scores` (Tensor):     The scores of masked "
"token prediction. Its data type should be float32.     If "
"`masked_positions` is None, its shape is [batch_size, sequence_length, "
"vocab_size].     Otherwise, its shape is [batch_size, mask_token_num, "
"vocab_size].  - `seq_relationship_score` (Tensor):     The scores of next"
" sentence prediction.     Its data type should be float32 and its shape "
"is [batch_size, 2]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaPretrainingHeads.forward:9
msgid "Returns tuple (``prediction_scores``, ``seq_relationship_score``)."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification:1
msgid ""
"NeZha Model with a linear layer on top of the hidden-states output layer,"
" designed for token classification tasks like NER tasks."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice:8
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering:6
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification:8
msgid ""
"The dropout probability for output of NeZha. If None, use the same value "
"as `hidden_dropout_prob` of `NeZhaModel` instance `nezha`. Defaults to "
"`None`."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward:1
msgid ""
"The NeZhaForTokenClassification forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForTokenClassification.forward:10
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits. Shape as `[batch_size, sequence_length, num_classes]` and dtype "
"as `float32`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering:1
msgid ""
"NeZha with a linear layer on top of the hidden-states output to compute "
"`span_start_logits` and `span_end_logits`, designed for question-"
"answering tasks like SQuAD."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:1
msgid ""
"The NeZhaForQuestionAnswering forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:10
msgid ""
"Returns tuple (`start_logits`, `end_logits`).  With the fields:  - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:10
msgid "Returns tuple (`start_logits`, `end_logits`)."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:16
msgid "`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:15
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:19
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.nezha.modeling.NeZhaForQuestionAnswering.forward:19
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice:1
msgid ""
"NeZha Model with a linear layer on top of the hidden-states output layer,"
" designed for multiple choice tasks like RocStories/SWAG tasks."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice:6
msgid "The number of choices. Defaults to `2`."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward:1
msgid ""
"The NeZhaForMultipleChoice forward method, overrides the __call__() "
"special method."
msgstr ""

#: of paddlenlp.transformers.nezha.modeling.NeZhaForMultipleChoice.forward:10
msgid ""
"Returns tensor `reshaped_logits`, a tensor of the input multiple choice "
"classification logits. Shape as `[batch_size, num_classes]` and dtype as "
"`float32`."
msgstr ""

