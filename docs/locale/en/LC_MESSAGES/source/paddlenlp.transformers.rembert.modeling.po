# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-19 14:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../source/paddlenlp.transformers.rembert.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM:1
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice:1
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering:1
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification:1
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification:1
#: paddlenlp.transformers.rembert.modeling.RemBertModel:1
msgid "基类：:class:`paddlenlp.transformers.rembert.modeling.RembertPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:1
msgid "The bare RemBERT Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM
#: paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward
#: paddlenlp.transformers.rembert.modeling.RemBertModel
#: paddlenlp.transformers.rembert.modeling.RemBertModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:10
msgid ""
"Vocabulary size of `inputs_ids` in `RemBertModel`. Also is the vocab size"
" of token embedding matrix. Defines the number of different tokens that "
"can be represented by the `inputs_ids` passed when calling "
"`RemBertModel`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:13
msgid "Dimensionality of the embedding layer. Defaults to `256`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:15
msgid "Dimensionality of the encoder layer and pooler layer. Defaults to `1152`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:17
msgid "Number of hidden layers in the Transformer encoder. Defaults to `32`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:19
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `18`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:22
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`. Defaults to `3072`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:27
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported. Defaults to `\"gelu\"`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:31
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:34
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0.1`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:37
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:40
msgid "The vocabulary size of `token_type_ids`. Defaults to `16`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:43
msgid ""
"The standard deviation of the normal initializer. Defaults to 0.02.  .. "
"note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`BertPretrainedModel.init_weights()` for how"
" weights are initialized in `BertModel`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:43
msgid "The standard deviation of the normal initializer. Defaults to 0.02."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:47
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`BertPretrainedModel.init_weights()` for how weights are "
"initialized in `BertModel`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel:50
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:1
msgid ""
"The RemBertModel forward method, overrides the `__call__()` special "
"method."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:7
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:12
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:13
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:15
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:18
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:22
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. Defaults to `None`, which means "
"nothing needed to be prevented attention to."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward
#: paddlenlp.transformers.rembert.modeling.RemBertModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:32
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`)  With the fields:  - "
"`sequence_output` (Tensor):     Sequence of hidden-states at the last "
"layer of the model.     It's data type should be float32 and its shape is"
" [batch_size, sequence_length, hidden_size].  - `pooled_output` (Tensor):"
"     The output of first token (`[CLS]`) in sequence.     We \"pool\" the"
" model by simply taking the hidden state corresponding to the first "
"token.     Its data type should be float32 and its shape is [batch_size, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:32
msgid "Returns tuple (`sequence_output`, `pooled_output`)"
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:14
#: paddlenlp.transformers.rembert.modeling.RemBertModel.forward:34
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:38
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:37
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and its shape is [batch_size, sequence_length, "
"hidden_size]."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:42
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertModel.forward:41
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and its shape is [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward
#: paddlenlp.transformers.rembert.modeling.RemBertModel.forward
msgid "返回类型"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward:15
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:17
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:26
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:17
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:17
#: paddlenlp.transformers.rembert.modeling.RemBertModel.forward:47
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM:1
msgid "RemBert Model with a `masked language modeling` head on top."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM:3
msgid "An instance of :class:`RemBertModel`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward:1
#: paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward:3
#: paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward:5
#: paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward:7
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:3
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:5
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:7
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:9
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:3
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:5
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:7
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:9
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:3
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:5
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:7
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:9
msgid "See :class:`RemBertModel`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMaskedLM.forward:10
msgid ""
"Returns tensor `prediction_scores`, The scores of masked token "
"prediction. Its data type should be float32 and shape is [batch_size, "
"sequence_length, vocab_size]."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering:1
msgid ""
"RemBert Model with a linear layer on top of the hidden-states output to "
"compute `span_start_logits` and `span_end_logits`, designed for question-"
"answering tasks like SQuAD."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice:4
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering:4
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification:4
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification:4
msgid "An instance of RemBertModel."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:1
msgid ""
"The RemBertForQuestionAnswering forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:12
msgid ""
"Returns tuple (`start_logits`, `end_logits`).  With the fields:  - "
"`start_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the start position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length].  -"
" `end_logits` (Tensor):     A tensor of the input token classification "
"logits, indicates the end position of the labelled span.     Its data "
"type should be float32 and its shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:12
msgid "Returns tuple (`start_logits`, `end_logits`)."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:18
msgid "`start_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:17
msgid ""
"A tensor of the input token classification logits, indicates the start "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:21
msgid "`end_logits` (Tensor):"
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForQuestionAnswering.forward:21
msgid ""
"A tensor of the input token classification logits, indicates the end "
"position of the labelled span. Its data type should be float32 and its "
"shape is [batch_size, sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification:1
msgid ""
"RemBert Model with a linear layer on top of the output layer, designed "
"for sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification:6
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification:6
msgid "The number of classes."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:1
msgid ""
"The RemBertForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForSequenceClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input text classification "
"logits. Shape as `[batch_size, num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice:1
msgid ""
"RemBert Model with a linear layer on top of the hidden-states output "
"layer, designed for multiple choice tasks like RocStories/SWAG tasks."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice:6
msgid "The number of choices."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:1
msgid ""
"The BertForMultipleChoice forward method, overrides the __call__() "
"special method."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:3
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:5
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:7
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:9
msgid ""
"See :class:`RemBertModel` and shape as [batch_size, num_choice, "
"sequence_length]."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForMultipleChoice.forward:12
msgid ""
"Returns tensor `reshaped_logits`, a tensor of the multiple choice "
"classification logits. Shape as `[batch_size, num_choice]` and dtype as "
"`float32`."
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RembertPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RembertPretrainedModel.init_weights:1
msgid "Initialization hook"
msgstr ""

#: of paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification:1
msgid ""
"RemBert Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:1
msgid ""
"The RemBertForTokenClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.rembert.modeling.RemBertForTokenClassification.forward:12
msgid ""
"Returns tensor `logits`, a tensor of the input token classification "
"logits. Shape as `[batch_size, sequence_length, num_classes]` and dtype "
"as `float32`."
msgstr ""

