# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-07 11:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/paddlenlp.data.sampler.rst:2
msgid "sampler"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper:1
msgid "基类：:class:`object`"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper:1
msgid ""
"SamplerHelper is to help construct iterable sampler used for "
"`DataLoader`. It wraps a dataset and uses its :code:`__getitem__` Every "
"SamplerHelper subclass has to provide an :meth:`__iter__` method, "
"providing a way to iterate over indices of dataset elements, and a "
":meth:`__len__` method that returns the length of the returned iterators."
" Also can be used as batch iterator instead of indices iterator when "
"`iterator` yield samples rather than indices by initializing `iterator` "
"with a iterable dataset. .. note:: The :meth:`__len__` method isn't "
"strictly required by"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper:10
msgid ""
":class:`DataLoader`, but is expected in any calculation involving the "
"length of a :class:`DataLoader`."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper
#: paddlenlp.data.sampler.SamplerHelper.batch
#: paddlenlp.data.sampler.SamplerHelper.shard
#: paddlenlp.data.sampler.SamplerHelper.shuffle
msgid "参数"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper:12
msgid "Input dataset for SamplerHelper."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper:14
msgid "Iterator of dataset. Default: None."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.length:1
msgid "Returns: the length of the SamplerHelper."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.apply:1
msgid ""
"Transformations would be performed. It includes `Shuffle`, `sort`, `fit` "
"and `shard`. :param fn: Transformations to be performed. It returns "
"transformed iterable (and data_source). :type fn: callable"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.apply
#: paddlenlp.data.sampler.SamplerHelper.batch
#: paddlenlp.data.sampler.SamplerHelper.shard
#: paddlenlp.data.sampler.SamplerHelper.shuffle
#: paddlenlp.data.sampler.SamplerHelper.sort
msgid "返回"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.apply:5
msgid "A new transformed object."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.apply
msgid "返回类型"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.shuffle:1
msgid ""
"Shuffle the dataset according to the given buffer size and random seed. "
":param buffer_size: Buffer size for shuffle. if buffer_size < 0 or more "
"than the length of the dataset,"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.shuffle:3
msgid "buffer_size is the length of the dataset. Default: -1."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.shuffle:5
msgid "Seed for the random. Default: None."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.batch:20
#: paddlenlp.data.sampler.SamplerHelper.shard:9
#: paddlenlp.data.sampler.SamplerHelper.shuffle:8
#: paddlenlp.data.sampler.SamplerHelper.sort:12
msgid "SamplerHelper"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.sort:1
msgid ""
"Sort samples according to given callable cmp or key. :param cmp: The "
"function of comparison. Default: None. :type cmp: callable :param key: "
"Return element to be compared. Default: None. :type key: callable :param "
"reverse: If True, it means in descending order, and False means in "
"ascending order. Default: False. :type reverse: bool :param buffer_size: "
"Buffer size for sort. If buffer_size < 0 or buffer_size is more than the "
"length of the data,"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.sort:9
msgid "buffer_size will be set to the length of the data. Default: -1."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.batch:1
msgid ""
"To produce a BatchSampler. :param batch_size: Batch size. :type "
"batch_size: int :param drop_last: Whether to drop the last mini batch. "
"Default:"
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.batch:5
msgid "False."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.batch:7
msgid ""
"It accepts four arguments: index of data source, the length of minibatch,"
" the size of minibatch so far and data source, and it returns the size of"
" mini batch so far. Actually, the returned value can be anything and "
"would used as argument size_so_far in `key`. If None, it would return the"
" length of mini match. Default: None."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.batch:14
msgid ""
"It accepts the size of minibatch so far and the length of minibatch, and "
"returns what to be compared with `batch_size`. If None, only the size of "
"mini batch so far would be compared with `batch_size`. Default: None."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.shard:1
msgid ""
"Operates slice using multi GPU. :param num_replicas: The number of "
"training process, and is also the number of GPU cards used in training."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.shard:3
msgid "Default: None."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.shard:5
msgid ""
"Number of training process. Equal to the value of the environment "
"variable PADDLE_TRAINER_ID. Default: None."
msgstr ""

#: of paddlenlp.data.sampler.SamplerHelper.list:1
msgid ""
"Produce a sampler with a `listiterator` when calling `iter`. Since `list`"
" would fetch all contents at time, thus it can get accurate length. "
":returns: SamplerHelper"
msgstr ""

