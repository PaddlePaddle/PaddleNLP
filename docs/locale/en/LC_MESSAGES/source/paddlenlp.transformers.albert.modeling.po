# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.albert.modeling.rst:2
msgid "modeling"
msgstr ""

#: of paddlenlp.transformers.albert.modeling:1
msgid "Modeling classes for ALBERT model."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertPretrainedModel:1
msgid "基类：:class:`paddlenlp.transformers.model_utils.PretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertPretrainedModel:1
msgid ""
"An abstract class for pretrained ALBERT models. It provides ALBERT "
"related `model_config_file`, `pretrained_init_configuration`, "
"`resource_files_names`, `pretrained_resource_files_map`, "
"`base_model_prefix` for downloading and loading pretrained models. See "
"`PretrainedModel` for more details."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM:1
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice:1
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining:1
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification:1
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification:1
#: paddlenlp.transformers.albert.modeling.AlbertModel:1
msgid "基类：:class:`paddlenlp.transformers.albert.modeling.AlbertPretrainedModel`"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:1
msgid "The bare Albert Model transformer outputting raw hidden-states."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:3
msgid ""
"This model inherits from "
":class:`~paddlenlp.transformers.model_utils.PretrainedModel`. Refer to "
"the superclass documentation for the generic methods."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:6
msgid ""
"This model is also a Paddle `paddle.nn.Layer "
"<https://www.paddlepaddle.org.cn/documentation "
"/docs/en/api/paddle/fluid/dygraph/layers/Layer_en.html>`__ subclass. Use "
"it as a regular Paddle Layer and refer to the Paddle documentation for "
"all matter related to general usage and behavior."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward
#: paddlenlp.transformers.albert.modeling.AlbertModel
#: paddlenlp.transformers.albert.modeling.AlbertModel.forward
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:10
msgid ""
"Vocabulary size of `inputs_ids` in `AlbertModel`. Also is the vocab size "
"of token embedding matrix. Defines the number of different tokens that "
"can be represented by the `inputs_ids` passed when calling `AlbertModel`."
" Defaults to `30000`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:14
msgid "Dimensionality of the embedding layer. Defaults to `128`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:16
msgid "Dimensionality of the encoder layer and pooler layer. Defaults to `768`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:18
msgid "Number of hidden layers in the Transformer encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:20
msgid "Number of hidden groups in the Transformer encoder. Defaults to `1`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:22
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:25
msgid ""
"Dimensionality of the feed-forward (ff) layer in the encoder. Input "
"tensors to ff layers are firstly projected from `hidden_size` to "
"`intermediate_size`, and then projected back to `hidden_size`. Typically "
"`intermediate_size` is larger than `hidden_size`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:29
msgid "Number of inner groups in a hidden group. Default to `1`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:31
msgid ""
"The non-linear activation function in the feed-forward layer. "
"``\"gelu\"``, ``\"relu\"`` and any other paddle supported activation "
"functions are supported."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:35
msgid ""
"The dropout probability for all fully connected layers in the embeddings "
"and encoder. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:38
msgid ""
"The dropout probability used in MultiHeadAttention in all encoder layers "
"to drop some attention target. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:41
msgid ""
"The maximum value of the dimensionality of position encoding, which "
"dictates the maximum supported length of an input sequence. Defaults to "
"`512`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:44
msgid "The vocabulary size of `token_type_ids`. Defaults to `12`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:46
msgid ""
"The standard deviation of the normal initializer. Defaults to `0.02`.  .."
" note::     A normal_initializer initializes weight matrices as normal "
"distributions.     See :meth:`BertPretrainedModel.init_weights()` for how"
" weights are initialized in `ElectraModel`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:46
msgid "The standard deviation of the normal initializer. Defaults to `0.02`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:49
msgid ""
"A normal_initializer initializes weight matrices as normal distributions."
" See :meth:`BertPretrainedModel.init_weights()` for how weights are "
"initialized in `ElectraModel`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:52
msgid ""
"The `epsilon` parameter used in :class:`paddle.nn.LayerNorm` for "
"initializing layer normalization layers. A small value to the variance "
"added to the normalization layer to prevent division by zero. Default to "
"`1e-12`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:56
msgid "The index of padding token in the token vocabulary. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel:58
msgid "Whether or not to add the pooling layer. Default to `False`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:1
msgid "The AlbertModel forward method, overrides the `__call__()` special method."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:3
msgid ""
"Indices of input sequence tokens in the vocabulary. They are numerical "
"representations of tokens that build the input sequence. Its data type "
"should be `int64` and it has a shape of [batch_size, sequence_length]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:7
msgid ""
"Mask used in multi-head attention to avoid performing attention on to "
"some unwanted positions, usually the paddings or the subsequent "
"positions. Its data type can be int, float and bool. When the data type "
"is bool, the `masked` tokens have `False` values and the others have "
"`True` values. When the data type is int, the `masked` tokens have `0` "
"values and the others have `1` values. When the data type is float, the "
"`masked` tokens have `-INF` values and the others have `0` values. It is "
"a tensor with shape broadcasted to `[batch_size, num_attention_heads, "
"sequence_length, sequence_length]`. Defaults to `None`, which means "
"nothing needed to be prevented attention to."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:16
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:  - 0 corresponds to a *sentence A* token, - 1 corresponds to a "
"*sentence B* token.  Its data type should be `int64` and it has a shape "
"of [batch_size, sequence_length]. Defaults to `None`, which means we "
"don't add segment embeddings."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:16
msgid ""
"Segment token indices to indicate different portions of the inputs. "
"Selected in the range ``[0, type_vocab_size - 1]``. If `type_vocab_size` "
"is 2, which means the inputs have two portions. Indices can either be 0 "
"or 1:"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:21
msgid "0 corresponds to a *sentence A* token,"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:22
msgid "1 corresponds to a *sentence B* token."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:24
msgid ""
"Its data type should be `int64` and it has a shape of [batch_size, "
"sequence_length]. Defaults to `None`, which means we don't add segment "
"embeddings."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:27
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, max_position_embeddings - 1]``. "
"Shape as `(batch_size, num_tokens)` and dtype as int64. Defaults to "
"`None`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:31
msgid ""
"Mask to nullify selected heads of the self-attention modules. Masks "
"values can either be 0 or 1:  - 1 indicates the head is **not masked**, -"
" 0 indicated the head is **masked**."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:31
msgid ""
"Mask to nullify selected heads of the self-attention modules. Masks "
"values can either be 0 or 1:"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:33
msgid "1 indicates the head is **not masked**,"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:34
msgid "0 indicated the head is **masked**."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:36
msgid ""
"If you want to control how to convert `inputs_ids` indices into "
"associated vectors, you can pass an embedded representation directly "
"instead of passing `inputs_ids`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:39
msgid ""
"Whether or not to return a dict instead of a plain tuple. Default to "
"`False`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward
#: paddlenlp.transformers.albert.modeling.AlbertModel.forward
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:42
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`) or a dict with "
"`last_hidden_state`, `pooled_output`, `all_hidden_states`, "
"`all_attentions` fields.  With the fields:  - `sequence_output` (Tensor):"
"    Sequence of hidden-states at the last layer of the model.    It's "
"data type should be float32 and has a shape of [`batch_size, "
"sequence_length, hidden_size`].  - `pooled_output` (Tensor):    The "
"output of first token (`[CLS]`) in sequence.    We \"pool\" the model by "
"simply taking the hidden state corresponding to the first token.    Its "
"data type should be float32 and    has a shape of [batch_size, "
"hidden_size].  - `last_hidden_state` (Tensor):    The output of the last "
"encoder layer, it is also the `sequence_output`.    It's data type should"
" be float32 and has a shape of [batch_size, sequence_length, "
"hidden_size].  - `all_hidden_states` (Tensor):    Hidden_states of all "
"layers in the Transformer encoder. The length of `all_hidden_states` is "
"`num_hidden_layers + 1`.    For all element in the tuple, its data type "
"should be float32 and its shape is [`batch_size, sequence_length, "
"hidden_size`].  - `all_attentions` (Tensor):    Attentions of all layers "
"of in the Transformer encoder. The length of `all_attentions` is "
"`num_hidden_layers`.    For all element in the tuple, its data type "
"should be float32 and its shape is    [`batch_size, num_attention_heads, "
"sequence_length, sequence_length`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:42
msgid ""
"Returns tuple (`sequence_output`, `pooled_output`) or a dict with "
"`last_hidden_state`, `pooled_output`, `all_hidden_states`, "
"`all_attentions` fields."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:21
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:25
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:25
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:20
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:20
#: paddlenlp.transformers.albert.modeling.AlbertModel.forward:45
msgid "With the fields:"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:49
msgid "`sequence_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:48
msgid ""
"Sequence of hidden-states at the last layer of the model. It's data type "
"should be float32 and has a shape of [`batch_size, sequence_length, "
"hidden_size`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:55
msgid "`pooled_output` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:52
msgid ""
"The output of first token (`[CLS]`) in sequence. We \"pool\" the model by"
" simply taking the hidden state corresponding to the first token. Its "
"data type should be float32 and has a shape of [batch_size, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:59
msgid "`last_hidden_state` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:58
msgid ""
"The output of the last encoder layer, it is also the `sequence_output`. "
"It's data type should be float32 and has a shape of [batch_size, "
"sequence_length, hidden_size]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:63
msgid "`all_hidden_states` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:62
msgid ""
"Hidden_states of all layers in the Transformer encoder. The length of "
"`all_hidden_states` is `num_hidden_layers + 1`. For all element in the "
"tuple, its data type should be float32 and its shape is [`batch_size, "
"sequence_length, hidden_size`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:67
msgid "`all_attentions` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertModel.forward:66
msgid ""
"Attentions of all layers of in the Transformer encoder. The length of "
"`all_attentions` is `num_hidden_layers`. For all element in the tuple, "
"its data type should be float32 and its shape is [`batch_size, "
"num_attention_heads, sequence_length, sequence_length`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward
#: paddlenlp.transformers.albert.modeling.AlbertModel.forward
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:37
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:37
#: paddlenlp.transformers.albert.modeling.AlbertModel.forward:72
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining:1
msgid ""
"Albert Model with a `masked language modeling` head and a `sentence order"
" prediction` head on top."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM:3
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining:4
msgid "An instance of :class:`AlbertModel`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining:6
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining:8
msgid "An instance of :class:`AlbertSOPHead`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:3
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:5
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:7
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:9
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:11
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:13
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:15
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:3
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:5
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:7
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:9
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:11
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:13
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:19
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining:10
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:3
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:5
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:7
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:9
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:11
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:13
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:19
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:3
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:5
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:7
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:9
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:11
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:13
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:15
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:3
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:5
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:7
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:9
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:11
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:13
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:15
msgid "See :class:`AlbertModel`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:1
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:1
msgid ""
"The AlbertForPretraining forward method, overrides the __call__() special"
" method."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:15
msgid ""
"Labels of the next sequence prediction. Input should be a sequence pair "
"Indices should be 0 or 1. ``0`` indicates original order (sequence A, "
"then sequence B), and ``1`` indicates switched order (sequence B, then "
"sequence A). Defaults to `None`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:22
msgid ""
"Returns tuple (`prediction_scores`, `sop_scores`) or a dict with "
"`prediction_logits`, `sop_logits`, `pooled_output`, `hidden_states`, "
"`attentions` fields.  With the fields:  - `prediction_scores` (Tensor):"
"     The scores of masked token prediction. Its data type should be "
"float32.     and its shape is [batch_size, sequence_length, vocab_size]."
"  - `sop_scores` (Tensor):     The scores of sentence order prediction."
"     Its data type should be float32 and its shape is [batch_size, 2].  -"
" `prediction_logits` (Tensor):     The scores of masked token prediction."
" Its data type should be float32.     and its shape is [batch_size, "
"sequence_length, vocab_size].  - `sop_logits` (Tensor):     The scores of"
" sentence order prediction.     Its data type should be float32 and its "
"shape is [batch_size, 2].  - `hidden_states` (Tensor):     Hidden_states "
"of all layers in the Transformer encoder. The length of `hidden_states` "
"is `num_hidden_layers + 1`.     For all element in the tuple, its data "
"type should be float32 and its shape is [`batch_size, sequence_length, "
"hidden_size`].  - `attentions` (Tensor):     Attentions of all layers of "
"in the Transformer encoder. The length of `attentions` is "
"`num_hidden_layers`.     For all element in the tuple, its data type "
"should be float32 and its shape is     [`batch_size, num_attention_heads,"
" sequence_length, sequence_length`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:22
msgid ""
"Returns tuple (`prediction_scores`, `sop_scores`) or a dict with "
"`prediction_logits`, `sop_logits`, `pooled_output`, `hidden_states`, "
"`attentions` fields."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:25
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:29
msgid "`prediction_scores` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:24
#: paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:28
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:28
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:36
msgid ""
"The scores of masked token prediction. Its data type should be float32. "
"and its shape is [batch_size, sequence_length, vocab_size]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:33
msgid "`sop_scores` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:32
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:40
msgid ""
"The scores of sentence order prediction. Its data type should be float32 "
"and its shape is [batch_size, 2]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:37
msgid "`prediction_logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:41
msgid "`sop_logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:33
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:33
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:45
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:28
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:28
msgid "`hidden_states` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:32
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:32
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:44
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:27
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:27
msgid ""
"Hidden_states of all layers in the Transformer encoder. The length of "
"`hidden_states` is `num_hidden_layers + 1`. For all element in the tuple,"
" its data type should be float32 and its shape is [`batch_size, "
"sequence_length, hidden_size`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:37
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:37
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:49
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:32
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:32
msgid "`attentions` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:36
#: paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:36
#: paddlenlp.transformers.albert.modeling.AlbertForPretraining.forward:48
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:31
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:31
msgid ""
"Attentions of all layers of in the Transformer encoder. The length of "
"`attentions` is `num_hidden_layers`. For all element in the tuple, its "
"data type should be float32 and its shape is [`batch_size, "
"num_attention_heads, sequence_length, sequence_length`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM:1
msgid "Albert Model with a `masked language modeling` head on top."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:18
msgid ""
"Returns tensor `prediction_scores` or a dict with `logits`, "
"`hidden_states`, `attentions` fields.  With the fields:  - "
"`prediction_scores` (Tensor):     The scores of masked token prediction. "
"Its data type should be float32.     and its shape is [batch_size, "
"sequence_length, vocab_size].  - `logits` (Tensor):     The scores of "
"masked token prediction. Its data type should be float32.     and its "
"shape is [batch_size, sequence_length, vocab_size].  - `hidden_states` "
"(Tensor):     Hidden_states of all layers in the Transformer encoder. The"
" length of `hidden_states` is `num_hidden_layers + 1`.     For all "
"element in the tuple, its data type should be float32 and its shape is "
"[`batch_size, sequence_length, hidden_size`].  - `attentions` (Tensor):"
"     Attentions of all layers of in the Transformer encoder. The length "
"of `attentions` is `num_hidden_layers`.     For all element in the tuple,"
" its data type should be float32 and its shape is     [`batch_size, "
"num_attention_heads, sequence_length, sequence_length`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:18
msgid ""
"Returns tensor `prediction_scores` or a dict with `logits`, "
"`hidden_states`, `attentions` fields."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMaskedLM.forward:29
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:24
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:24
msgid "`logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification:1
msgid ""
"Albert Model with a linear layer on top of the output layer, designed for"
" sequence classification/regression tasks like GLUE tasks."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice:4
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification:4
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification:4
msgid "An instance of AlbertModel."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification:6
msgid "The dropout probability for the classifier. Defaults to `0`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification:9
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification:6
msgid "The number of classes. Defaults to `2`."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:1
msgid ""
"The AlbertForSequenceClassification forward method, overrides the "
"__call__() special method."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:18
msgid ""
"Returns tensor `logits`, or a dict with `logits`, `hidden_states`, "
"`attentions` fields.  With the fields:  - `logits` (Tensor):     A tensor"
" of the input text classification logits.     Shape as `[batch_size, "
"num_classes]` and dtype as float32.  - `hidden_states` (Tensor):     "
"Hidden_states of all layers in the Transformer encoder. The length of "
"`hidden_states` is `num_hidden_layers + 1`.     For all element in the "
"tuple, its data type should be float32 and its shape is [`batch_size, "
"sequence_length, hidden_size`].  - `attentions` (Tensor):     Attentions "
"of all layers of in the Transformer encoder. The length of `attentions` "
"is `num_hidden_layers`.     For all element in the tuple, its data type "
"should be float32 and its shape is     [`batch_size, num_attention_heads,"
" sequence_length, sequence_length`]."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:18
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:18
msgid ""
"Returns tensor `logits`, or a dict with `logits`, `hidden_states`, "
"`attentions` fields."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForSequenceClassification.forward:23
msgid ""
"A tensor of the input text classification logits. Shape as `[batch_size, "
"num_classes]` and dtype as float32."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForTokenClassification:1
msgid ""
"Albert Model with a linear layer on top of the hidden-states output "
"layer, designed for token classification tasks like NER tasks."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:1
msgid ""
"The AlbertForTokenClassification forward method, overrides the __call__()"
" special method."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:18
msgid ""
"Returns tensor `logits`, or a dict with `logits`, `hidden_states`, "
"`attentions` fields.  With the fields:  - `logits` (Tensor):     A tensor"
" of the input token classification logits.     Shape as `[batch_size, "
"sequence_length, num_classes]` and dtype as `float32`.  - `hidden_states`"
" (Tensor):     Hidden_states of all layers in the Transformer encoder. "
"The length of `hidden_states` is `num_hidden_layers + 1`.     For all "
"element in the tuple, its data type should be float32 and its shape is "
"[`batch_size, sequence_length, hidden_size`].  - `attentions` (Tensor):"
"     Attentions of all layers of in the Transformer encoder. The length "
"of `attentions` is `num_hidden_layers`.     For all element in the tuple,"
" its data type should be float32 and its shape is     [`batch_size, "
"num_attention_heads, sequence_length, sequence_length`]."
msgstr ""

#: of
#: paddlenlp.transformers.albert.modeling.AlbertForTokenClassification.forward:23
msgid ""
"A tensor of the input token classification logits. Shape as `[batch_size,"
" sequence_length, num_classes]` and dtype as `float32`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice:1
msgid ""
"Albert Model with a linear layer on top of the hidden-states output "
"layer, designed for multiple choice tasks like SWAG tasks ."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:1
msgid ""
"The AlbertForQuestionAnswering forward method, overrides the __call__() "
"special method."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:15
msgid "Start positions of the text. Defaults to `None`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:17
msgid "End positions of the text. Defaults to `None`."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:22
msgid ""
"Returns tensor `reshaped_logits` or a dict with `reshaped_logits`, "
"`hidden_states`, `attentions` fields.  With the fields:  - "
"`reshaped_logits` (Tensor):     A tensor of the input multiple choice "
"classification logits.     Shape as `[batch_size, num_classes]` and dtype"
" as `float32`.  - `hidden_states` (Tensor):     Hidden_states of all "
"layers in the Transformer encoder. The length of `hidden_states` is "
"`num_hidden_layers + 1`.     For all element in the tuple, its data type "
"should be float32 and its shape is [`batch_size, sequence_length, "
"hidden_size`].  - `attentions` (Tensor):     Attentions of all layers of "
"in the Transformer encoder. The length of `attentions` is "
"`num_hidden_layers`.     For all element in the tuple, its data type "
"should be float32 and its shape is     [`batch_size, num_attention_heads,"
" sequence_length, sequence_length`]."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:22
msgid ""
"Returns tensor `reshaped_logits` or a dict with `reshaped_logits`, "
"`hidden_states`, `attentions` fields."
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:29
msgid "`reshaped_logits` (Tensor):"
msgstr ""

#: of paddlenlp.transformers.albert.modeling.AlbertForMultipleChoice.forward:28
msgid ""
"A tensor of the input multiple choice classification logits. Shape as "
"`[batch_size, num_classes]` and dtype as `float32`."
msgstr ""

