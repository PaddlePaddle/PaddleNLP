# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-19 14:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../source/paddlenlp.transformers.model_utils.rst:2
msgid "model\\_utils"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:1
msgid ""
"The base class for all pretrained models. It mainly provides common "
"methods for loading (construction and loading) and saving pretrained "
"models. Loading and saving also rely on the following class attributes "
"which should be overridden by derived classes accordingly:"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:6
msgid ""
"**model_config_file** (str): Represents the file name of model "
"configuration for configuration saving and loading in local file system. "
"The value is `model_config.json`."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:9
msgid ""
"**resource_files_names** (dict): Name of local file where the model "
"configuration can be saved and loaded locally. Currently, resources only "
"include the model state, thus the dict only includes `'model_state'` as "
"key with corresponding value `'model_state.pdparams'` for model weights "
"saving and loading."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:13
msgid ""
"**pretrained_init_configuration** (dict): Provides the model "
"configurations of built-in pretrained models (contrasts to models in "
"local file system). It has pretrained model names as keys (such as `bert-"
"base-uncased`), and the values are dict preserving corresponding "
"configuration for model initialization."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:17
msgid ""
"**pretrained_resource_files_map** (dict): Provides resource URLs of "
"built-in pretrained models (contrasts to models in local file system). It"
" has the same key as resource_files_names (that is \"model_state\"), and "
"the corresponding value is a dict with specific model name to model "
"weights URL mapping (such as \"bert-base-uncased\" -> "
"\"https://bj.bcebos.com/paddlenlp/models/transformers/bert-base-"
"uncased.pdparams\")."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:23
msgid ""
"**base_model_prefix** (str): Represents the attribute associated to the "
"base model in derived classes of the same architecture adding layers on "
"top of the base model. Note: A base model class is pretrained model class"
" decorated by `register_base_model`, such as `BertModel`; A derived model"
" class is a pretrained model class adding layers on top of the base "
"model, and it has a base model as attribute, such as "
"`BertForSequenceClassification`."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:30
msgid ""
"Methods common to models for text generation are defined in "
"`GenerationMixin` and also inherited here."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel:33
msgid ""
"Besides, metaclass `InitTrackerMeta` is used to create `PretrainedModel`,"
" by which subclasses can track arguments for initialization "
"automatically."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.base_model:1
msgid ""
"The body of the same model architecture. It is the base model itself for "
"base model or the base model attribute for derived model."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.base_model
#: paddlenlp.transformers.model_utils.PretrainedModel.model_name_list
msgid "type"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.base_model:5
msgid "PretrainedModel"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.model_name_list:1
msgid ""
"Contains all supported built-in pretrained model names of the current "
"PretrainedModel class."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.model_name_list:4
msgid "list"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:1
msgid ""
"Creates an instance of `PretrainedModel`. Model weights are loaded by "
"specifying name of a built-in pretrained model, or a community "
"contributed model, or a local file directory path."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained
#: paddlenlp.transformers.model_utils.PretrainedModel.save_model_config
#: paddlenlp.transformers.model_utils.PretrainedModel.save_pretrained
#: paddlenlp.transformers.model_utils.register_base_model
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:5
msgid ""
"Name of pretrained model or dir path to load from. The string can be:  - "
"Name of a built-in pretrained model - Name of a community-contributed "
"pretrained model. - Local directory path which contains model weights "
"file(\"model_state.pdparams\")   and model config file "
"(\"model_config.json\")."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:5
msgid "Name of pretrained model or dir path to load from. The string can be:"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:8
msgid "Name of a built-in pretrained model"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:9
msgid "Name of a community-contributed pretrained model."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:10
msgid ""
"Local directory path which contains model weights "
"file(\"model_state.pdparams\") and model config file "
"(\"model_config.json\")."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:13
msgid ""
"Position arguments for model `__init__`. If provided, use these as "
"position argument values for model initialization."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:16
msgid ""
"Keyword arguments for model `__init__`. If provided, use these to update "
"pre-defined keyword argument values for model initialization. If the "
"keyword is in `__init__` argument names of base model, update argument "
"values of the base model; else update argument values of derived model."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:22
msgid ""
"The weights read in can be choosed to place on CPU or GPU though the "
"model is on the default device. If `True`, load the model weights as "
"`numpy.ndarray` on CPU. Otherwise, weights would be loaded as tensors on "
"the default device. Note that if on GPU, the latter would creates extra "
"temporary tensors in addition to the model weights, which doubles the "
"memory usage . Thus it is suggested to use `True` for big models on GPU. "
"Default to `False`."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained
#: paddlenlp.transformers.model_utils.PretrainedModel.get_model_config
#: paddlenlp.transformers.model_utils.register_base_model
msgid "返回"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:32
msgid "An instance of `PretrainedModel`."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained
#: paddlenlp.transformers.model_utils.PretrainedModel.get_model_config
#: paddlenlp.transformers.model_utils.register_base_model
msgid "返回类型"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.from_pretrained:36
#: paddlenlp.transformers.model_utils.PretrainedModel.save_pretrained:13
#: paddlenlp.transformers.model_utils.register_base_model:13
msgid "示例"
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.get_model_config:1
msgid "Get model configuration."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.get_model_config:3
msgid "The config of the model."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.save_model_config:1
msgid ""
"Saves model configuration to a file named \"model_config.json\" under "
"`save_dir`."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.save_model_config:3
msgid "Directory to save model_config file into."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.save_pretrained:1
msgid ""
"Saves model configuration and related resources (model state) as files "
"under `save_dir`. The model configuration would be saved into a file "
"named \"model_config.json\", and model state would be saved into a file "
"named \"model_state.pdparams\"."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.save_pretrained:6
msgid ""
"The `save_dir` can be used in `from_pretrained` as argument value of "
"`pretrained_model_name_or_path` to re-load the trained model."
msgstr ""

#: of paddlenlp.transformers.model_utils.PretrainedModel.save_pretrained:9
msgid "Directory to save files into."
msgstr ""

#: of paddlenlp.transformers.model_utils.register_base_model:1
msgid ""
"A decorator for `PretrainedModel` class. It first retrieves the parent "
"class of the class being decorated, then sets the `base_model_class` "
"attribute of that parent class to be the class being decorated. In "
"summary, the decorator registers the decorated class as the base model "
"class in all derived classes under the same architecture."
msgstr ""

#: of paddlenlp.transformers.model_utils.register_base_model:6
msgid "The class (inherited from PretrainedModel) to be decorated ."
msgstr ""

#: of paddlenlp.transformers.model_utils.register_base_model:9
msgid "The input class `cls` after decorating."
msgstr ""

