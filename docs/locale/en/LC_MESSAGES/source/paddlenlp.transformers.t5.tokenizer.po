# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, PaddleNLP
# This file is distributed under the same license as the PaddleNLP package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddleNLP \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-18 21:31+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../source/paddlenlp.transformers.t5.tokenizer.rst:2
msgid "tokenizer"
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:1
msgid "基类：:class:`paddlenlp.transformers.albert.tokenizer.AlbertEnglishTokenizer`"
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:1
msgid ""
"Constructs a T5 tokenizer based on SentencePiece . This tokenizer "
"inherits from "
":class:`~paddlenlp.transformers.tokenizer_utils.PretrainedTokenizer` "
"which contains most of the main methods. For more information regarding "
"those methods, please refer to this superclass."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.clean_up_tokenization
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask
msgid "参数"
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:6
msgid ""
"The vocabulary file (ends with '.spm') required to instantiate a "
"`SentencePiece <https://github.com/google/sentencepiece>`__ tokenizer."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:9
msgid ""
"Whether or not to lowercase the input when tokenizing. Defaults to "
"`False`."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:11
msgid "Whether or note to remove space when tokenizing. Defaults to `True`."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:13
msgid "Whether or note to keep accents when tokenizing. Defaults to `False`."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:15
msgid ""
"A special token representing the *eos (end-of-sentence)* token. Defaults "
"to \"</s>\"."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:18
msgid ""
"A special token representing the *unknown (out-of-vocabulary)* token. An "
"unknown token is set to be `unk_token` inorder to be converted to an ID. "
"Defaults to \"<unk>\"."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer:22
msgid ""
"A special token used to make arrays of tokens the same size for batching "
"purposes. Defaults to \"<pad>\"."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:1
msgid "Build model inputs from a sequence or a pair of sequence."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:3
msgid "An Reformer sequence has the following format:"
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:5
msgid "single sequence:      ``X </s>``"
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:6
msgid "pair of sequences:        ``A </s> B </s>``"
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:8
msgid "List of IDs to which the special tokens will be added."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:10
msgid "Optional second list of IDs for sequence pairs. Defaults to None."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.clean_up_tokenization
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask
msgid "返回"
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens:13
msgid "List of input_id with the appropriate special tokens."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.build_inputs_with_special_tokens
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.clean_up_tokenization
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask
msgid "返回类型"
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences:1
msgid "Create a mask from the two sequences."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences:3
msgid ""
"If `token_ids_1` is `None`, this method only returns the first portion of"
" the mask (0s)."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences:5
msgid "List of IDs."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences:7
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.create_token_type_ids_from_sequences:10
msgid "List of token_type_id according to the given sequence(s)."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:1
msgid ""
"Retrieves sequence ids from a token list that has no special tokens "
"added. This method is called when adding special tokens using the "
"tokenizer ``encode`` methods."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:4
msgid "List of ids of the first sequence."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:6
msgid "List of ids of the second sequence."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:8
msgid ""
"Whether or not the token list is already formatted with special tokens "
"for the model. Defaults to None."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:12
msgid ""
"The list of integers in the range [0, 1]:     1 for a special token, 0 "
"for a sequence token."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:14
msgid "The list of integers in the range [0, 1]:"
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.get_special_tokens_mask:15
msgid "1 for a special token, 0 for a sequence token."
msgstr ""

#: of
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.convert_tokens_to_string:1
msgid "Converts a sequence of tokens (string) in a single string."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode:1
msgid ""
"Converts a sequence of ids in a string, using the tokenizer and "
"vocabulary with options to remove special tokens and clean up "
"tokenization spaces."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode:4
msgid ""
"Similar to doing "
"``self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))``."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode:3
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode:6
msgid "List of tokenized input ids."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode:5
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode:8
msgid ""
"Whether or not to remove special tokens in the decoding. Defaults to "
"`False`."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode:7
#: paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode:10
msgid "Whether or not to clean up the tokenization spaces. Defaults to `True`."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.decode:13
msgid "The decoded sentence."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode:1
msgid ""
"Convert a list of lists of token ids into a list of strings by calling "
"decode."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.batch_decode:10
msgid "The list of decoded sentences."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.clean_up_tokenization:1
msgid ""
"Clean up a list of simple English tokenization artifacts like spaces "
"before punctuations and abbreviated forms."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.clean_up_tokenization:3
msgid "The text to clean up."
msgstr ""

#: of paddlenlp.transformers.t5.tokenizer.T5Tokenizer.clean_up_tokenization:6
msgid "The cleaned-up string."
msgstr ""

