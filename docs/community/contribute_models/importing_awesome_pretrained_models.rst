==========================================
导入优质的预训练模型
==========================================

目前PaddleNLP已经支持绝大部分主流的预训练模型。
覆盖15个网络结构和67个预训练模型参数，既包括百度自研的预训练模型如ERNIE系列, PLATO, SKEP等，
也涵盖业界主流的中文预训练模型。

除了使用PaddleNLP内置的预训练模型以外，我们也鼓励用户向PaddleNLP贡献预训练模型。

下面我们来介绍一下贡献预训练模型的详细流程：


0. 模型文件概述
------------------------------------------

模型文件是个啥，pytorch和paddle

state_dict是个啥，print()

print(model)

1. 确定你想要贡献的模型
------------------------------------------
PaddleNLP已有的模型结构（15个网络结构，如bert，ernie，roberta，xlnet）。
确定模型结构后，寻找找到你想贡献的模型权重
去哪里找？Huggingface, github repo

2. 找到对应的模型权重
------------------------------------------


3. 模型参数一一对应
------------------------------------------

.. code:: python

    >>> for (key, value) in model.state_dict():
    ...     print(key)
    ...     print(value.shape)

4. 模型格式转换
------------------------------------------

4.1 注意点: nn.linear
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
transpose

4.2 注意点: batch norm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


4.3 注意点: 权重合并或者拆分
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
注意shape需要一致

4.4 模型转换代码1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


4.5 模型转换代码2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


5. 对齐精度
------------------------------------------

5.1 注意点: 打开eval模式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.2 注意点: 设置dropout为0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

5.3 注意点: 权重合并或者拆分
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
max(diff)

6. 成功运行fine-tuning代码进行验证
------------------------------------------
注意

precommit