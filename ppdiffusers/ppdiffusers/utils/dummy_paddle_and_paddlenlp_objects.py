# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
# Copyright 2023 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is autogenerated by the command `make fix-copies`, do not edit.
from . import DummyObject, requires_backends


class AltDiffusionImg2ImgPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class AltDiffusionPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class CycleDiffusionPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class LDMTextToImagePipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class PaintByExamplePipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionAdapterPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class SemanticStableDiffusionPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionAttendAndExcitePipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionControlNetPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionDepth2ImgPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionImageVariationPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionImg2ImgPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionInpaintPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionInpaintPipelineLegacy(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionInstructPix2PixPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionLatentUpscalePipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionPanoramaPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionMegaPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionPipelineAllinOne(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionPipelineSafe(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionPix2PixZeroPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionSAGPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableDiffusionUpscalePipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableUnCLIPImg2ImgPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class StableUnCLIPPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class UnCLIPImageVariationPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class UnCLIPPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class VersatileDiffusionDualGuidedPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class VersatileDiffusionImageVariationPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class VersatileDiffusionPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class VersatileDiffusionTextToImagePipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class VQDiffusionPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class TextToVideoSDPipeline(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class LDMBertModel(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])


class CaptionDecoder(metaclass=DummyObject):
    _backends = ["paddle", "paddlenlp"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["paddle", "paddlenlp"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["paddle", "paddlenlp"])
